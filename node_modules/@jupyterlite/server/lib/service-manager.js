import { PromiseDelegate } from '@lumino/coreutils';
import { Signal } from '@lumino/signaling';
import { PageConfig, URLExt } from '@jupyterlab/coreutils';
import { WORKER_NAME } from './tokens';
export class ServiceWorkerManager {
    constructor(options) {
        var _a;
        this._registration = null;
        this._registrationChanged = new Signal(this);
        this._ready = new PromiseDelegate();
        const workerUrl = (_a = options === null || options === void 0 ? void 0 : options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
        void this.initialize(workerUrl).catch(console.warn);
    }
    /**
     * A signal emitted when the registration changes.
     */
    get registrationChanged() {
        return this._registrationChanged;
    }
    /**
     * Whether the ServiceWorker is enabled or not.
     */
    get enabled() {
        return this._registration !== null;
    }
    get ready() {
        return this._ready.promise;
    }
    async initialize(workerUrl) {
        const { serviceWorker } = navigator;
        let registration = null;
        if (!serviceWorker) {
            console.warn('ServiceWorkers not supported in this browser');
        }
        else if (serviceWorker.controller) {
            registration =
                (await serviceWorker.getRegistration(serviceWorker.controller.scriptURL)) ||
                    null;
            // eslint-disable-next-line no-console
            console.info('JupyterLite ServiceWorker was already registered');
        }
        if (!registration && serviceWorker) {
            try {
                // Unregister any existing service workers before registering the new one.
                const registrations = await serviceWorker.getRegistrations();
                await Promise.all(registrations.map((r) => r.unregister()));
                // eslint-disable-next-line no-console
                console.info('Existing JupyterLite ServiceWorkers unregistered');
                // eslint-disable-next-line no-console
                console.info('Registering new JupyterLite ServiceWorker', workerUrl);
                registration = await serviceWorker.register(workerUrl);
                // eslint-disable-next-line no-console
                console.info('JupyterLite ServiceWorker was sucessfully registered');
            }
            catch (err) {
                console.warn(err);
                console.warn(`JupyterLite ServiceWorker registration unexpectedly failed: ${err}`);
            }
        }
        this.setRegistration(registration);
        if (!registration) {
            this._ready.reject(void 0);
        }
        else {
            this._ready.resolve(void 0);
        }
    }
    setRegistration(registration) {
        this._registration = registration;
        this._registrationChanged.emit(this._registration);
    }
}
//# sourceMappingURL=service-manager.js.map