import { FS, ERRNO_CODES, PATH, IEmscriptenStream, IEmscriptenStreamOps, IEmscriptenNodeOps, IEmscriptenFSNode, IStats } from './emscripten';
export declare const DRIVE_SEPARATOR = ":";
export declare const DRIVE_API_PATH = "/api/drive.v1";
export declare const BLOCK_SIZE = 4096;
export type TDriveMethod = 'readdir' | 'rmdir' | 'rename' | 'getmode' | 'lookup' | 'mknod' | 'getattr' | 'get' | 'put';
/**
 * Interface of a request on the /api/drive endpoint
 */
export interface IDriveRequest {
    /**
     * The method of the request (rmdir, readdir etc)
     */
    method: TDriveMethod;
    /**
     * The expected receiver of the request
     */
    receiver?: 'broadcast.ts';
    /**
     * The path to the file/directory for which the request was sent
     */
    path: string;
    /**
     * Extra data on the request
     */
    data?: any;
}
/** Implementation-specifc extension of an open stream, adding the file. */
export interface IDriveStream extends IEmscriptenStream {
    file?: DriveFS.IFile;
}
export declare class DriveFSEmscriptenStreamOps implements IEmscriptenStreamOps {
    private fs;
    constructor(fs: DriveFS);
    open(stream: IDriveStream): void;
    close(stream: IDriveStream): void;
    read(stream: IDriveStream, buffer: Uint8Array, offset: number, length: number, position: number): number;
    write(stream: IDriveStream, buffer: Uint8Array, offset: number, length: number, position: number): number;
    llseek(stream: IDriveStream, offset: number, whence: number): number;
}
export declare class DriveFSEmscriptenNodeOps implements IEmscriptenNodeOps {
    private fs;
    constructor(fs: DriveFS);
    getattr(node: IEmscriptenFSNode): IStats;
    setattr(node: IEmscriptenFSNode, attr: IStats): void;
    lookup(parent: IEmscriptenFSNode, name: string): IEmscriptenFSNode;
    mknod(parent: IEmscriptenFSNode, name: string, mode: number, dev: number): IEmscriptenFSNode;
    rename(oldNode: IEmscriptenFSNode, newDir: IEmscriptenFSNode, newName: string): void;
    unlink(parent: IEmscriptenFSNode, name: string): void;
    rmdir(parent: IEmscriptenFSNode, name: string): void;
    readdir(node: IEmscriptenFSNode): string[];
    symlink(parent: IEmscriptenFSNode, newName: string, oldPath: string): void;
    readlink(node: IEmscriptenFSNode): string;
}
/**
 * Wrap ServiceWorker requests for an Emscripten-compatible synchronous API.
 */
export declare class ContentsAPI {
    constructor(baseUrl: string, driveName: string, mountpoint: string, FS: FS, ERRNO_CODES: ERRNO_CODES);
    request(data: IDriveRequest): any;
    lookup(path: string): DriveFS.ILookup;
    getmode(path: string): number;
    mknod(path: string, mode: number): any;
    rename(oldPath: string, newPath: string): void;
    readdir(path: string): string[];
    rmdir(path: string): void;
    get(path: string): DriveFS.IFile;
    put(path: string, value: DriveFS.IFile): any;
    getattr(path: string): IStats;
    /**
     * Normalize a Path by making it compliant for the content manager
     *
     * @param path: the path relatively to the Emscripten drive
     */
    normalizePath(path: string): string;
    /**
     * Get the api/drive endpoint
     */
    get endpoint(): string;
    private _baseUrl;
    private _driveName;
    private _mountpoint;
    private FS;
    private ERRNO_CODES;
}
export declare class DriveFS {
    FS: FS;
    API: ContentsAPI;
    PATH: PATH;
    ERRNO_CODES: ERRNO_CODES;
    driveName: string;
    constructor(options: DriveFS.IOptions);
    node_ops: IEmscriptenNodeOps;
    stream_ops: IEmscriptenStreamOps;
    mount(mount: any): IEmscriptenFSNode;
    createNode(parent: IEmscriptenFSNode | null, name: string, mode: number, dev: number): IEmscriptenFSNode;
    getMode(path: string): number;
    realPath(node: IEmscriptenFSNode): string;
}
/**
 * A namespace for DriveFS configurations, etc.
 */
export declare namespace DriveFS {
    /**
     * A file representation;
     */
    interface IFile {
        data: Uint8Array;
        format: 'json' | 'text' | 'base64';
    }
    /**
     * The response to a lookup request;
     */
    interface ILookup {
        ok: boolean;
        mode: number;
    }
    /**
     * Initialization options for a drive;
     */
    interface IOptions {
        FS: FS;
        PATH: PATH;
        ERRNO_CODES: ERRNO_CODES;
        baseUrl: string;
        driveName: string;
        mountpoint: string;
    }
}
