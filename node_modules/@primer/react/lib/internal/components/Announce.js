'use strict';

var liveRegionElement = require('@primer/live-region-element');
var React = require('react');
var Box = require('../../Box/Box.js');
var useEffectOnce = require('../hooks/useEffectOnce.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
/**
 * `Announce` is a component that will announce the text content of the
 * `children` passed in to screen readers using the given politeness level. It
 * will also announce any changes to the text content of `children`
 */
function Announce({
  children,
  politeness = 'polite',
  ...rest
}) {
  const ref = React.useRef(null);
  const savedPoliteness = React.useRef(politeness);
  React.useEffect(() => {
    savedPoliteness.current = politeness;
  }, [politeness]);

  // Announce the initial message, this is wrapped in `useEffectOnce` so that it
  // does not announce twice in StrictMode
  useEffectOnce.useEffectOnce(() => {
    if (ref.current !== null) {
      liveRegionElement.announceFromElement(ref.current, {
        politeness: savedPoliteness.current
      });
    }
  });
  React.useEffect(() => {
    if (ref.current === null) {
      return;
    }
    const {
      current: container
    } = ref;

    // When the text of the container changes, announce the new text
    const observer = new MutationObserver(mutationList => {
      for (const mutation of mutationList) {
        if (mutation.type === 'characterData') {
          liveRegionElement.announceFromElement(container, {
            politeness: savedPoliteness.current
          });
          break;
        }
      }
    });
    observer.observe(container, {
      subtree: true,
      characterData: true
    });
    return () => {
      observer.disconnect();
    };
  }, []);
  return /*#__PURE__*/React__default.default.createElement(Box, _extends({}, rest, {
    ref: ref
  }), children);
}
Announce.displayName = "Announce";

exports.Announce = Announce;
