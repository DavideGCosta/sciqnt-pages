import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { useTheme, Box, CounterLabel, FormControl } from "@primer/react";
export const Slider = ({ name = "slider", id = "slider", min = 0, max = 10, value = 5, label = "label", step = 1, markers = false, displayValue = true, disabled = false, orientation = "horizontal", width = "200px", onChange, }) => {
    const { colorMode } = useTheme();
    const defaultValue = max < min ? min : min + (max - min) / 2;
    const [sliderVal, setSliderVal] = useState(defaultValue);
    useEffect(() => {
        setSliderVal(value ?? defaultValue);
    }, [value, defaultValue]);
    const handleSliderChange = (event) => {
        const newValue = Number(event.target.value);
        setSliderVal(newValue);
        onChange(newValue);
    };
    // Warning: unreliable
    const sliderStyle = {
        width,
        ...(orientation === "vertical" ? { transform: "rotate(-90deg)" } : {}),
        colorScheme: colorMode == 'day' ? 'light' : 'dark'
    };
    return (_jsxs(Box, { display: "flex", alignItems: "center", children: [_jsx("input", { type: "range", id: id, name: name, min: min, max: max, value: sliderVal, step: step ?? "any", list: "slider-markers", style: sliderStyle, onChange: handleSliderChange, disabled: disabled }), markers && step && (_jsx("datalist", { id: "slider-markers", children: Array.from({ length: Math.floor((max - min) / step) + 1 }, (_, i) => min + i * step).map((e) => (
                // TODO: Supply markers as array and show them here
                _jsx("option", { value: e }, `slider-marker-${e}`))) })), label && _jsx(FormControl.Label, { htmlFor: id, sx: { ml: 2 }, children: label }), displayValue && orientation === "horizontal" && _jsx(CounterLabel, { sx: { ml: 2 }, children: sliderVal })] }));
};
export default Slider;
