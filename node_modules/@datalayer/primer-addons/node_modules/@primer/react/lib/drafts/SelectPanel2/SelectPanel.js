'use strict';

var React = require('react');
var octiconsReact = require('@primer/octicons-react');
var behaviors = require('@primer/behaviors');
var ActionListContainerContext = require('../../ActionList/ActionListContainerContext.js');
var useSlots = require('../../hooks/useSlots.js');
var useFocusZone = require('../../hooks/useFocusZone.js');
var Overlay = require('../../Overlay/Overlay.js');
var InputLabel = require('../../internal/components/InputLabel.js');
var invariant = require('../../utils/invariant.js');
var useProvidedRefOrCreate = require('../../hooks/useProvidedRefOrCreate.js');
var useId = require('../../hooks/useId.js');
var useAnchoredPosition = require('../../hooks/useAnchoredPosition.js');
var Box = require('../../Box/Box.js');
var Heading = require('../../Heading/Heading.js');
var Text = require('../../Text/Text.js');
var Tooltip = require('../../Tooltip/Tooltip.js');
var TextInput = require('../../TextInput/TextInput.js');
var Spinner = require('../../Spinner/Spinner.js');
var Octicon = require('../../Octicon/Octicon.js');
var Link = require('../../Link/Link.js');
var Checkbox = require('../../Checkbox/Checkbox.js');
var Button = require('../../Button/Button.js');
var IconButton = require('../../Button/IconButton.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const SelectPanelContext = /*#__PURE__*/React__default.default.createContext({
  title: '',
  description: undefined,
  panelId: '',
  onCancel: () => {},
  onClearSelection: undefined,
  searchQuery: '',
  setSearchQuery: () => {},
  selectionVariant: 'multiple'
});
const Panel = ({
  title,
  description,
  variant = 'anchored',
  selectionVariant = 'multiple',
  id,
  defaultOpen = false,
  open: propsOpen,
  anchorRef: providedAnchorRef,
  onCancel: propsOnCancel,
  onClearSelection: propsOnClearSelection,
  onSubmit: propsOnSubmit,
  width = 'medium',
  height = 'large',
  ...props
}) => {
  var _slots$header;
  const [internalOpen, setInternalOpen] = React__default.default.useState(defaultOpen);

  // sync open state with props
  if (propsOpen !== undefined && internalOpen !== propsOpen) setInternalOpen(propsOpen);

  // TODO: replace this hack with clone element?

  // ðŸš¨ Hack for good API!
  // we strip out Anchor from children and wire it up to Dialog
  // with additional props for accessibility
  let Anchor;
  const anchorRef = useProvidedRefOrCreate.useProvidedRefOrCreate(providedAnchorRef);
  const onAnchorClick = () => {
    if (!internalOpen) setInternalOpen(true);else onInternalCancel();
  };
  const contents = React__default.default.Children.map(props.children, child => {
    if ( /*#__PURE__*/React__default.default.isValidElement(child) && child.type === SelectPanelButton) {
      Anchor = /*#__PURE__*/React__default.default.cloneElement(child, {
        // @ts-ignore TODO
        ref: anchorRef,
        onClick: onAnchorClick,
        'aria-haspopup': true,
        'aria-expanded': internalOpen
      });
      return null;
    }
    return child;
  });
  const onInternalClose = React__default.default.useCallback(() => {
    if (internalOpen === false) return; // nothing to do here
    if (propsOpen === undefined) setInternalOpen(false);
  }, [internalOpen, propsOpen]);
  const onInternalCancel = () => {
    onInternalClose();
    if (typeof propsOnCancel === 'function') propsOnCancel();
  };
  const onInternalSubmit = event => {
    event === null || event === void 0 ? void 0 : event.preventDefault(); // there is no event with selectionVariant=instant
    onInternalClose();
    if (typeof propsOnSubmit === 'function') propsOnSubmit(event);
  };
  const onInternalClearSelection = () => {
    if (typeof propsOnClearSelection === 'function') propsOnClearSelection();
  };
  const internalAfterSelect = () => {
    if (selectionVariant === 'instant') onInternalSubmit();
  };

  /* Search/Filter */
  const [searchQuery, setSearchQuery] = React__default.default.useState('');

  /* Panel plumbing */
  const panelId = useId.useId(id);
  const [slots, childrenInBody] = useSlots.useSlots(contents, {
    header: SelectPanelHeader,
    footer: SelectPanelFooter
  });

  /* Arrow keys navigation for list items */
  const {
    containerRef: listContainerRef
  } = useFocusZone.useFocusZone({
    bindKeys: behaviors.FocusKeys.ArrowVertical | behaviors.FocusKeys.HomeAndEnd | behaviors.FocusKeys.PageUpDown,
    focusableElementFilter: element => element.tagName === 'LI'
  }, [internalOpen]);

  /* Dialog */
  const dialogRef = React__default.default.useRef(null);

  // sync dialog open state (imperative) with internal component state
  React__default.default.useEffect(() => {
    var _dialogRef$current, _dialogRef$current2;
    if (internalOpen) (_dialogRef$current = dialogRef.current) === null || _dialogRef$current === void 0 ? void 0 : _dialogRef$current.showModal();else if ((_dialogRef$current2 = dialogRef.current) !== null && _dialogRef$current2 !== void 0 && _dialogRef$current2.open) dialogRef.current.close();
  }, [internalOpen]);

  // dialog handles Esc automatically, so we have to sync internal state
  // but it doesn't call onCancel, so have another effect for that!
  React__default.default.useEffect(() => {
    const dialogEl = dialogRef.current;
    dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.addEventListener('close', onInternalClose);
    return () => dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.removeEventListener('close', onInternalClose);
  }, [onInternalClose]);

  // Esc handler
  React__default.default.useEffect(() => {
    const dialogEl = dialogRef.current;
    const handler = event => {
      if (event.key === 'Escape') onInternalCancel();
    };
    dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.addEventListener('keydown', handler);
    return () => dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.removeEventListener('keydown', handler);
  });

  // Autofocus hack: React doesn't support autoFocus for dialog: https://github.com/facebook/react/issues/23301
  // tl;dr: react takes over autofocus instead of letting the browser handle it,
  // but not for dialogs, so we have to do it
  React__default.default.useEffect(() => {
    var _document$querySelect;
    if (internalOpen) (_document$querySelect = document.querySelector('input')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.focus();
  }, [internalOpen]);

  /* Anchored */
  const {
    position
  } = useAnchoredPosition.useAnchoredPosition({
    anchorElementRef: anchorRef,
    floatingElementRef: dialogRef,
    side: 'outside-bottom',
    align: 'start'
  }, [anchorRef.current, dialogRef.current]);

  /* 
    We don't close the panel when clicking outside.
    For many years, we used to save changes and closed the dialog (for label picker)
    which isn't accessible, clicking outside should discard changes and close the dialog
    Fixing this a11y bug would confuse users, so as a middle ground,
    we don't close the menu and nudge the user towards the footer actions
  */
  const [footerAnimationEnabled, setFooterAnimationEnabled] = React__default.default.useState(false);
  const onClickOutside = () => {
    setFooterAnimationEnabled(true);
    window.setTimeout(() => setFooterAnimationEnabled(false), 350);
  };
  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, Anchor, /*#__PURE__*/React__default.default.createElement(Overlay.StyledOverlay, {
    as: "dialog",
    ref: dialogRef,
    "aria-labelledby": `${panelId}--title`,
    "aria-describedby": description ? `${panelId}--description` : undefined,
    width: width,
    height: height,
    sx: {
      // reset dialog default styles
      border: 'none',
      padding: 0,
      '&[open]': {
        display: 'flex'
      },
      // to fit children

      ...(variant === 'anchored' ? {
        margin: 0,
        top: position === null || position === void 0 ? void 0 : position.top,
        left: position === null || position === void 0 ? void 0 : position.left
      } : {}),
      '::backdrop': {
        backgroundColor: variant === 'anchored' ? 'transparent' : 'primer.canvas.backdrop'
      },
      '& [data-selectpanel-primary-actions]': {
        animation: footerAnimationEnabled ? 'selectpanel-gelatine 350ms linear' : 'none'
      },
      '@keyframes selectpanel-gelatine': {
        '0%': {
          transform: 'scale(1, 1)'
        },
        '25%': {
          transform: 'scale(0.9, 1.1)'
        },
        '50%': {
          transform: 'scale(1.1, 0.9)'
        },
        '75%': {
          transform: 'scale(0.95, 1.05)'
        },
        '100%': {
          transform: 'scale(1, 1)'
        }
      }
    },
    onClick: event => {
      if (event.target === event.currentTarget) onClickOutside();
    }
  }, /*#__PURE__*/React__default.default.createElement(SelectPanelContext.Provider, {
    value: {
      panelId,
      title,
      description,
      onCancel: onInternalCancel,
      onClearSelection: propsOnClearSelection ? onInternalClearSelection : undefined,
      searchQuery,
      setSearchQuery,
      selectionVariant
    }
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    as: "form",
    method: "dialog",
    onSubmit: onInternalSubmit,
    sx: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%'
    }
  }, (_slots$header = slots.header) !== null && _slots$header !== void 0 ? _slots$header :
  /*#__PURE__*/
  /* render default header as fallback */
  React__default.default.createElement(SelectPanelHeader, null), /*#__PURE__*/React__default.default.createElement(Box, {
    as: "div",
    ref: listContainerRef,
    sx: {
      flexShrink: 1,
      flexGrow: 1,
      overflow: 'hidden',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'space-between',
      ul: {
        overflowY: 'auto',
        flexGrow: 1
      }
    }
  }, /*#__PURE__*/React__default.default.createElement(ActionListContainerContext.ActionListContainerContext.Provider, {
    value: {
      container: 'SelectPanel',
      listRole: 'listbox',
      selectionAttribute: 'aria-selected',
      selectionVariant: selectionVariant === 'instant' ? 'single' : selectionVariant,
      afterSelect: internalAfterSelect
    }
  }, childrenInBody)), slots.footer))));
};
const SelectPanelButton = /*#__PURE__*/React__default.default.forwardRef((props, anchorRef) => {
  return /*#__PURE__*/React__default.default.createElement(Button.ButtonComponent, _extends({
    ref: anchorRef
  }, props));
});
const SelectPanelHeader = ({
  children,
  ...props
}) => {
  const [slots, childrenWithoutSlots] = useSlots.useSlots(children, {
    searchInput: SelectPanelSearchInput
  });
  const {
    title,
    description,
    panelId,
    onCancel,
    onClearSelection
  } = React__default.default.useContext(SelectPanelContext);
  return /*#__PURE__*/React__default.default.createElement(Box, _extends({
    sx: {
      display: 'flex',
      flexDirection: 'column',
      // gap: 2,
      padding: 2,
      borderBottom: '1px solid',
      borderColor: 'border.default'
    }
  }, props), /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: description ? 'start' : 'center',
      marginBottom: slots.searchInput ? 2 : 0
    }
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      marginLeft: 2,
      marginTop: description ? '2px' : 0
    }
  }, /*#__PURE__*/React__default.default.createElement(Heading, {
    as: "h1",
    id: `${panelId}--title`,
    sx: {
      fontSize: 14,
      fontWeight: 600
    }
  }, title), description ? /*#__PURE__*/React__default.default.createElement(Text, {
    id: `${panelId}--description`,
    sx: {
      fontSize: 0,
      color: 'fg.muted',
      display: 'block'
    }
  }, description) : null), /*#__PURE__*/React__default.default.createElement(Box, null, onClearSelection ? /*#__PURE__*/React__default.default.createElement(Tooltip, {
    text: "Clear selection",
    direction: "s",
    onClick: onClearSelection
  }, /*#__PURE__*/React__default.default.createElement(IconButton.IconButton, {
    type: "button",
    variant: "invisible",
    icon: octiconsReact.FilterRemoveIcon,
    "aria-label": "Clear selection"
  })) : null, /*#__PURE__*/React__default.default.createElement(Tooltip, {
    text: "Close",
    direction: "s"
  }, /*#__PURE__*/React__default.default.createElement(IconButton.IconButton, {
    type: "button",
    variant: "invisible",
    icon: octiconsReact.XIcon,
    "aria-label": "Close",
    onClick: () => onCancel()
  })))), slots.searchInput, childrenWithoutSlots);
};
SelectPanelHeader.displayName = "SelectPanelHeader";
const SelectPanelSearchInput = ({
  onChange: propsOnChange,
  ...props
}) => {
  // TODO: use forwardedRef
  const inputRef = /*#__PURE__*/React__default.default.createRef();
  const {
    setSearchQuery
  } = React__default.default.useContext(SelectPanelContext);
  const internalOnChange = event => {
    // If props.onChange is given, the application controls search,
    // otherwise the component does
    if (typeof propsOnChange === 'function') propsOnChange(event);else setSearchQuery(event.target.value);
  };
  return /*#__PURE__*/React__default.default.createElement(TextInput, _extends({
    ref: inputRef,
    block: true,
    leadingVisual: octiconsReact.SearchIcon,
    placeholder: "Search",
    trailingAction: /*#__PURE__*/React__default.default.createElement(TextInput.Action, {
      icon: octiconsReact.XCircleFillIcon,
      "aria-label": "Clear",
      tooltipDirection: "w",
      sx: {
        color: 'fg.subtle',
        bg: 'none'
      },
      onClick: () => {
        if (inputRef.current) inputRef.current.value = '';
        if (typeof propsOnChange === 'function') {
          // @ts-ignore TODO this is a hacky solution to clear
          propsOnChange({
            target: inputRef.current,
            currentTarget: inputRef.current
          });
        }
      }
    }),
    sx: {
      '&:has(input:placeholder-shown) .TextInput-action': {
        display: 'none'
      }
    },
    onChange: internalOnChange
  }, props));
};
SelectPanelSearchInput.displayName = "SelectPanelSearchInput";
const FooterContext = /*#__PURE__*/React__default.default.createContext(false);
const SelectPanelFooter = ({
  ...props
}) => {
  const {
    onCancel,
    selectionVariant
  } = React__default.default.useContext(SelectPanelContext);
  const hidePrimaryActions = selectionVariant === 'instant';
  if (hidePrimaryActions && !props.children) {
    // nothing to render
    // todo: we can inform them the developer footer will render nothing
    return null;
  }
  return /*#__PURE__*/React__default.default.createElement(FooterContext.Provider, {
    value: true
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: hidePrimaryActions ? 2 : 3,
      minHeight: '44px',
      borderTop: '1px solid',
      borderColor: 'border.default'
    }
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      flexGrow: hidePrimaryActions ? 1 : 0
    }
  }, props.children), hidePrimaryActions ? null : /*#__PURE__*/React__default.default.createElement(Box, {
    "data-selectpanel-primary-actions": true,
    sx: {
      display: 'flex',
      gap: 2
    }
  }, /*#__PURE__*/React__default.default.createElement(Button.ButtonComponent, {
    size: "small",
    type: "button",
    onClick: () => onCancel()
  }, "Cancel"), /*#__PURE__*/React__default.default.createElement(Button.ButtonComponent, {
    size: "small",
    type: "submit",
    variant: "primary"
  }, "Save"))));
};
SelectPanelFooter.displayName = "SelectPanelFooter";
const SecondaryButton = props => {
  return /*#__PURE__*/React__default.default.createElement(Button.ButtonComponent, _extends({
    type: "button",
    size: "small",
    block: true
  }, props));
};
SecondaryButton.displayName = "SecondaryButton";
const SecondaryLink = props => {
  return (
    /*#__PURE__*/
    // @ts-ignore TODO: is as prop is not recognised by button?
    React__default.default.createElement(Button.ButtonComponent, _extends({
      as: Link,
      size: "small",
      variant: "invisible",
      block: true
    }, props, {
      sx: {
        fontSize: 0
      }
    }), props.children)
  );
};
SecondaryLink.displayName = "SecondaryLink";
const SecondaryCheckbox = ({
  id,
  children,
  ...props
}) => {
  const checkboxId = useId.useId(id);
  const {
    selectionVariant
  } = React__default.default.useContext(SelectPanelContext);

  // Checkbox should not be used with instant selection
  !(selectionVariant !== 'instant') ? process.env.NODE_ENV !== "production" ? invariant.invariant(false, 'Sorry! SelectPanel.SecondaryAction with variant="checkbox" is not allowed inside selectionVariant="instant"') : invariant.invariant(false) : void 0;
  return /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      alignItems: 'center',
      gap: 2
    }
  }, /*#__PURE__*/React__default.default.createElement(Checkbox, _extends({
    id: checkboxId,
    sx: {
      marginTop: 0
    }
  }, props)), /*#__PURE__*/React__default.default.createElement(InputLabel, {
    htmlFor: checkboxId,
    sx: {
      fontSize: 0
    }
  }, children));
};
SecondaryCheckbox.displayName = "SecondaryCheckbox";
const SelectPanelSecondaryAction = ({
  variant,
  ...props
}) => {
  const insideFooter = React__default.default.useContext(FooterContext);
  !insideFooter ? process.env.NODE_ENV !== "production" ? invariant.invariant(false, 'SelectPanel.SecondaryAction is only allowed inside SelectPanel.Footer') : invariant.invariant(false) : void 0;

  // @ts-ignore TODO
  if (variant === 'button') return /*#__PURE__*/React__default.default.createElement(SecondaryButton, props);
  // @ts-ignore TODO
  else if (variant === 'link') return /*#__PURE__*/React__default.default.createElement(SecondaryLink, props);
  // @ts-ignore TODO
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  else if (variant === 'checkbox') return /*#__PURE__*/React__default.default.createElement(SecondaryCheckbox, props);
};
const SelectPanelLoading = ({
  children = 'Fetching items...'
}) => {
  return /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
      gap: 3
    }
  }, /*#__PURE__*/React__default.default.createElement(Spinner, {
    size: "medium"
  }), /*#__PURE__*/React__default.default.createElement(Text, {
    sx: {
      fontSize: 1,
      color: 'fg.muted'
    }
  }, children));
};
SelectPanelLoading.displayName = "SelectPanelLoading";
const SelectPanelMessage = ({
  variant = 'warning',
  size = variant === 'empty' ? 'full' : 'inline',
  title,
  children
}) => {
  if (size === 'full') {
    return /*#__PURE__*/React__default.default.createElement(Box, {
      "aria-live": variant === 'empty' ? undefined : 'polite',
      sx: {
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        flexGrow: 1,
        height: '100%',
        gap: 1,
        paddingX: 4,
        textAlign: 'center',
        a: {
          color: 'inherit',
          textDecoration: 'underline'
        }
      }
    }, variant !== 'empty' ? /*#__PURE__*/React__default.default.createElement(Octicon, {
      icon: octiconsReact.AlertIcon,
      sx: {
        color: variant === 'error' ? 'danger.fg' : 'attention.fg',
        marginBottom: 2
      }
    }) : null, /*#__PURE__*/React__default.default.createElement(Text, {
      sx: {
        fontSize: 1,
        fontWeight: 'semibold'
      }
    }, title), /*#__PURE__*/React__default.default.createElement(Text, {
      sx: {
        fontSize: 1,
        color: 'fg.muted'
      }
    }, children));
  } else {
    const inlineVariantStyles = {
      empty: {},
      warning: {
        backgroundColor: 'attention.subtle',
        color: 'attention.fg',
        borderBottomColor: 'attention.muted'
      },
      error: {
        backgroundColor: 'danger.subtle',
        color: 'danger.fg',
        borderColor: 'danger.muted'
      }
    };
    return /*#__PURE__*/React__default.default.createElement(Box, {
      "aria-live": variant === 'empty' ? undefined : 'polite',
      sx: {
        display: 'flex',
        gap: 2,
        paddingX: 3,
        paddingY: '12px',
        fontSize: 0,
        borderBottom: '1px solid',
        a: {
          color: 'inherit',
          textDecoration: 'underline'
        },
        ...inlineVariantStyles[variant]
      }
    }, /*#__PURE__*/React__default.default.createElement(octiconsReact.AlertIcon, {
      size: 16
    }), /*#__PURE__*/React__default.default.createElement(Box, null, children));
  }
};
const SelectPanel = Object.assign(Panel, {
  Button: SelectPanelButton,
  Header: SelectPanelHeader,
  SearchInput: SelectPanelSearchInput,
  Footer: SelectPanelFooter,
  Loading: SelectPanelLoading,
  Message: SelectPanelMessage,
  SecondaryAction: SelectPanelSecondaryAction
});

exports.SelectPanel = SelectPanel;
