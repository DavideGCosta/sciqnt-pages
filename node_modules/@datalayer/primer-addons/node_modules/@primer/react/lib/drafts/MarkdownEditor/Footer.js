'use strict';

var React = require('react');
var octiconsReact = require('@primer/octicons-react');
var _MarkdownEditorContext = require('./_MarkdownEditorContext.js');
var useSlots = require('../../hooks/useSlots.js');
var Button = require('../../Button/Button.js');
var Box = require('../../Box/Box.js');
var Text = require('../../Text/Text.js');
var Spinner = require('../../Spinner/Spinner.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const uploadingNote = ([current, total]) => total === 1 ? `Uploading your file…` : `Uploading your files… (${current}/${total})`;
const CoreFooter = ({
  children
}) => {
  const [slots, childrenWithoutSlots] = useSlots.useSlots(children, {
    footerButtons: FooterButton
  });
  const {
    fileUploadProgress,
    previewMode
  } = React.useContext(_MarkdownEditorContext.MarkdownEditorContext);
  return /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      pt: 2,
      display: 'flex',
      gap: 2,
      justifyContent: 'space-between',
      alignItems: 'center',
      minHeight: '36px'
    },
    as: "footer"
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      gap: 1,
      alignItems: 'center',
      fontSize: 0
    }
  }, previewMode ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null) : fileUploadProgress ? /*#__PURE__*/React__default.default.createElement(Text, {
    sx: {
      py: 1,
      px: 2,
      color: 'fg.muted'
    }
  }, /*#__PURE__*/React__default.default.createElement(Spinner, {
    size: "small",
    sx: {
      mr: 1,
      verticalAlign: 'text-bottom'
    }
  }), " ", uploadingNote(fileUploadProgress)) : null, slots.footerButtons && /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      gap: 2
    }
  }, slots.footerButtons), /*#__PURE__*/React__default.default.createElement(DefaultFooterButtons, null)), !fileUploadProgress && /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      gap: 2
    }
  }, childrenWithoutSlots));
};
CoreFooter.displayName = "CoreFooter";
const Footer = ({
  children
}) => /*#__PURE__*/React__default.default.createElement(CoreFooter, null, children);
Footer.displayName = "Footer";
Footer.displayName = 'MarkdownEditor.Footer';
const FooterButton = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    disabled
  } = React.useContext(_MarkdownEditorContext.MarkdownEditorContext);
  return /*#__PURE__*/React__default.default.createElement(Button.ButtonComponent, _extends({
    ref: ref,
    size: "small",
    disabled: disabled
  }, props));
});
FooterButton.displayName = 'MarkdownEditor.FooterButton';
const DefaultFooterButtons = /*#__PURE__*/React.memo(() => {
  const {
    uploadButtonProps,
    fileDraggedOver
  } = React.useContext(_MarkdownEditorContext.MarkdownEditorContext);
  return uploadButtonProps ? /*#__PURE__*/React__default.default.createElement(FileUploadButton, _extends({
    fileDraggedOver: fileDraggedOver
  }, uploadButtonProps)) : null;
});
DefaultFooterButtons.displayName = 'MarkdownEditor.DefaultFooterButtons';
const FileUploadButton = /*#__PURE__*/React.memo(({
  fileDraggedOver,
  ...props
}) => {
  const {
    condensed,
    disabled
  } = React.useContext(_MarkdownEditorContext.MarkdownEditorContext);
  return /*#__PURE__*/React__default.default.createElement(Button.ButtonComponent, _extends({
    variant: "invisible",
    leadingVisual: octiconsReact.PaperclipIcon,
    size: "small",
    sx: {
      color: 'fg.muted',
      fontWeight: 'normal',
      px: 2
    },
    onMouseDown: e => {
      // Prevent pulling focus from the textarea
      e.preventDefault();
    },
    disabled: disabled
  }, props), condensed ? 'Add files' : fileDraggedOver ? 'Drop to add files' : 'Paste, drop, or click to add files');
});

exports.CoreFooter = CoreFooter;
exports.Footer = Footer;
exports.FooterButton = FooterButton;
