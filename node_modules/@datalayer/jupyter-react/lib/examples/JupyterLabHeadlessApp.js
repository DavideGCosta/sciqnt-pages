import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState } from 'react';
import { createRoot } from 'react-dom/client';
import { Box, Text, ToggleSwitch, ThemeProvider, useTheme, } from '@primer/react';
import { ThemeManager } from '@jupyterlab/apputils';
// import { NotebookTracker } from '@jupyterlab/notebook';
import Jupyter from '../jupyter/Jupyter';
import Lumino from '../components/lumino/Lumino';
import JupyterLabApp from '../components/jupyterlab/JupyterLabApp';
import * as darkThemeExtension from '@jupyterlab/theme-dark-extension';
import * as lightThemeExtension from '@jupyterlab/theme-light-extension';
import * as ipywidgetsExtension from '@jupyter-widgets/jupyterlab-manager';
import * as plotlyExtension from 'jupyterlab-plotly/lib/jupyterlab-plugin';
import * as mimePlotlyExtension from 'jupyterlab-plotly/lib/plotly-renderer';
const height = '900px';
const PATHS = ['ipywidgets.ipynb', 'plotly.ipynb'];
const PATH_INDEX = 1;
const JupyterLabHeadlessAppExample = () => {
    const [notebookBoxPanel, setNotebookBoxPanel] = useState();
    const [theme, setTheme] = useState('light');
    const [jupyterLabAdapter, setJupyterlabAdapter] = useState();
    const { setColorMode } = useTheme();
    const [isDark, setDark] = useState(false);
    const onSwitchClick = async () => {
        if (jupyterLabAdapter) {
            await jupyterLabAdapter.commands.execute('apputils:change-theme', {
                theme: isDark ? 'JupyterLab Light' : 'JupyterLab Dark',
            });
            setTheme(isDark ? 'light' : 'dark');
            setColorMode(isDark ? 'night' : 'day');
        }
        setDark(!isDark);
    };
    const handleSwitchChange = (dark) => {
        setDark(dark);
    };
    const onJupyterLab = async (jupyterLabAdapter) => {
        setJupyterlabAdapter(jupyterLabAdapter);
        const boxPanel = await jupyterLabAdapter.notebook(PATHS[PATH_INDEX]);
        setNotebookBoxPanel(boxPanel);
    };
    const onPlugin = (themeManager) => {
        // const notebookTracker = jupyterlabAdapter.service("@jupyterlab/notebook-extension:tracker") as NotebookTracker;
        console.log('Current theme', themeManager.theme);
    };
    return (_jsx(_Fragment, { children: _jsxs(Jupyter, { startDefaultKernel: false, disableCssLoading: true, colorMode: "light", children: [_jsx(ThemeProvider, { colorMode: theme === 'light' ? 'day' : 'night', dayScheme: "light", nightScheme: "dark_high_contrast", children: _jsxs(Box, { display: "flex", color: "fg.default", bg: "canvas.default", children: [_jsx(Box, { mr: 3, children: _jsx(Text, { as: "h2", children: "JupyterLab Headless Application" }) }), _jsxs(Box, { children: [_jsx(Box, { children: _jsx(Text, { fontSize: 2, fontWeight: "bold", id: "switch-label", display: "block", mb: 1, children: "Dark theme" }) }), _jsx(Box, { children: _jsx(ToggleSwitch, { size: "small", onClick: onSwitchClick, onChange: handleSwitchChange, checked: isDark, statusLabelPosition: "end", "aria-labelledby": "switch-label" }) })] })] }) }), notebookBoxPanel && (_jsx("div", { style: { position: 'relative' }, children: _jsx(Box, { className: "jp-LabShell", sx: {
                            position: 'relative',
                            '& .dla-Jupyter-Notebook': {
                                height,
                                maxHeight: height,
                                width: '100%',
                            },
                        }, children: _jsx(Lumino, { children: notebookBoxPanel }) }) })), _jsx(JupyterLabApp, { extensions: [
                        lightThemeExtension,
                        darkThemeExtension,
                        ipywidgetsExtension,
                        plotlyExtension,
                    ], mimeExtensions: [mimePlotlyExtension], headless: true, onJupyterLab: onJupyterLab, pluginId: "@jupyterlab/apputils-extension:themes", PluginType: ThemeManager, onPlugin: onPlugin })] }) }));
};
const div = document.createElement('div');
document.body.appendChild(div);
const root = createRoot(div);
root.render(_jsx(JupyterLabHeadlessAppExample, {}));
//# sourceMappingURL=JupyterLabHeadlessApp.js.map