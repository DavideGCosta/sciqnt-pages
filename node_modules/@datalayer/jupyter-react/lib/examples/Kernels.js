import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { createRoot } from 'react-dom/client';
import { useState } from 'react';
import { Box, Heading, Textarea, Button, Pagehead, Text } from '@primer/react';
import Jupyter from '../jupyter/Jupyter';
import { useJupyter } from '../jupyter/JupyterContext';
import { KERNEL_STATES, KernelProgressBar, KernelIndicator, KernelActionMenu, KernelSelector, KernelUsage, KernelInspector, KernelLauncher, KernelVariables, KernelLogs, Kernels, } from './../components/kernel';
export const KernelExecResultView = () => {
    const { defaultKernel } = useJupyter();
    const [running, setRunning] = useState(false);
    const [code, setCode] = useState('');
    const [result, setResult] = useState();
    const handleChange = (event) => {
        setCode(event.target.value);
    };
    const exec = async () => {
        setRunning(true);
        setResult('');
        const kernelExecutor = defaultKernel?.execute(code);
        const result = await kernelExecutor?.result;
        setResult(result);
        setRunning(false);
    };
    const interrupt = () => {
        defaultKernel?.interrupt();
    };
    return (_jsxs(Box, { m: 3, children: [_jsxs(Box, { children: [_jsx(Textarea, { placeholder: "Enter some code, e.g. print('1+1')", onChange: handleChange, value: code }), _jsxs(Box, { mt: 3, display: "flex", children: [_jsx(Box, { children: _jsx(Button, { disabled: !defaultKernel || running, onClick: exec, variant: !defaultKernel || running ? 'default' : 'primary', children: "Execute" }) }), _jsx(Box, { ml: 3, children: _jsx(Button, { disabled: !running, onClick: interrupt, variant: "danger", children: "Interrupt" }) })] })] }), running && (_jsx(Box, { mt: 3, children: _jsx(KernelProgressBar, {}) })), result && (_jsxs(Box, { mt: 3, children: [_jsx(Heading, { children: "Result" }), _jsx(Box, { children: _jsx("pre", { children: result }) })] }))] }));
};
const KernelComponents = () => {
    const { defaultKernel } = useJupyter();
    const selectKernel = (kernelModel) => {
        console.log('---', kernelModel);
    };
    const selectKernelSpec = (specModel) => {
        console.log('---', specModel);
    };
    return (_jsxs(_Fragment, { children: [_jsxs(Box, { display: "flex", children: [_jsx(Box, { children: _jsx(KernelExecResultView, {}) }), _jsxs(Box, { children: [_jsxs(Box, { display: "flex", mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: {
                                                color: 'fg.onEmphasis',
                                                bg: 'neutral.emphasis',
                                                m: 0,
                                                p: 2,
                                            }, children: "Kernel Status" }) }), _jsx(Box, { ml: 3, children: _jsx(KernelIndicator, { kernel: defaultKernel?.connection }) }), _jsx(Box, { ml: 3, children: Array.from(KERNEL_STATES.entries()).map(entry => {
                                            return (_jsxs(Box, { display: "flex", children: [_jsx(Box, { style: {
                                                            verticalAlign: 'middle',
                                                            display: 'inline-flex',
                                                        }, children: entry[1] }), _jsx(Box, { ml: 3, children: entry[0] })] }));
                                        }) })] }), _jsxs(Box, { display: "flex", mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: {
                                                color: 'fg.onEmphasis',
                                                bg: 'neutral.emphasis',
                                                m: 0,
                                                p: 2,
                                            }, children: "Kernel Action Menu" }) }), _jsx(Box, { ml: 3, style: { verticalAlign: 'middle', display: 'inline-flex' }, children: _jsx(KernelActionMenu, { kernel: defaultKernel }) })] }), _jsxs(Box, { display: "flex", mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: {
                                                color: 'fg.onEmphasis',
                                                bg: 'neutral.emphasis',
                                                m: 0,
                                                p: 2,
                                            }, children: "Kernel Selector" }) }), _jsx(Box, { ml: 3, style: { verticalAlign: 'middle', display: 'inline-flex' }, children: _jsx(KernelSelector, { selectKernel: selectKernel, selectKernelSpec: selectKernelSpec }) })] }), _jsxs(Box, { display: "flex", mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: {
                                                color: 'fg.onEmphasis',
                                                bg: 'neutral.emphasis',
                                                m: 0,
                                                p: 2,
                                            }, children: "Kernel Launcher" }) }), _jsx(Box, { ml: 3, style: { verticalAlign: 'middle', display: 'inline-flex' }, children: _jsx(KernelLauncher, {}) })] }), _jsxs(Box, { display: "flex", mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: {
                                                color: 'fg.onEmphasis',
                                                bg: 'neutral.emphasis',
                                                m: 0,
                                                p: 2,
                                            }, children: "Kernel Logs" }) }), _jsx(Box, { ml: 3, style: { verticalAlign: 'middle', display: 'inline-flex' }, children: _jsx(KernelLogs, {}) })] })] })] }), _jsxs(Box, { mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: { color: 'fg.onEmphasis', bg: 'neutral.emphasis', m: 0, p: 2 }, children: "Kernel Usage" }) }), _jsx(Box, { ml: 3, children: _jsx(KernelUsage, { kernel: defaultKernel }) })] }), _jsxs(Box, { mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: { color: 'fg.onEmphasis', bg: 'neutral.emphasis', m: 0, p: 2 }, children: "Kernel Variables" }) }), _jsx(Box, { ml: 3, children: _jsx(KernelVariables, { kernel: defaultKernel }) })] }), _jsxs(Box, { mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: { color: 'fg.onEmphasis', bg: 'neutral.emphasis', m: 0, p: 2 }, children: "Kernels" }) }), _jsx(Box, { ml: 3, children: _jsx(Kernels, {}) })] }), _jsxs(Box, { mt: 3, children: [_jsx(Box, { children: _jsx(Text, { as: "p", sx: { color: 'fg.onEmphasis', bg: 'neutral.emphasis', m: 0, p: 2 }, children: "Kernel Inspector" }) }), _jsx(Box, { children: _jsx(KernelInspector, { kernel: defaultKernel }) })] })] }));
};
const div = document.createElement('div');
document.body.appendChild(div);
const root = createRoot(div);
root.render(_jsxs(Jupyter, { children: [_jsx(Pagehead, { children: "The Kernel Components" }), _jsx(KernelComponents, {})] }));
//# sourceMappingURL=Kernels.js.map