import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { Box, IconButton, Button, ButtonGroup } from '@primer/react';
import { PlusIcon, PlayIcon, StopIcon, TrashIcon, ZapIcon, PaperAirplaneIcon, } from '@primer/octicons-react';
import { notebookActions, selectKernelStatus, } from '../../components/notebook/NotebookRedux';
export const NotebookToolbar = (props) => {
    const { notebookId } = props;
    const [type, setType] = useState('code');
    const dispatch = useDispatch();
    const kernelStatus = selectKernelStatus(notebookId);
    const handleChangeCellType = (newType) => {
        setType(newType);
    };
    return (_jsxs(Box, { display: "flex", pt: 1, pb: 1, sx: {
            width: '100%',
            borderBottomWidth: 1,
            borderBottomStyle: 'solid',
            borderColor: 'border.default',
        }, children: [_jsxs(Box, { sx: {
                    display: 'flex',
                    width: '50%',
                    paddingLeft: '7vw',
                    gap: '0.75vw',
                }, children: [_jsx(IconButton, { variant: "invisible", size: "small", color: "primary", "aria-label": "Save", title: "Save", onClick: e => {
                            e.preventDefault();
                            dispatch(notebookActions.save.started({
                                uid: notebookId,
                                date: new Date(),
                            }));
                        }, icon: ZapIcon }), _jsx(IconButton, { variant: "invisible", size: "small", color: "secondary", "aria-label": "Run cell", title: "Run cell", onClick: e => {
                            e.preventDefault();
                            dispatch(notebookActions.run.started(notebookId));
                        }, style: { color: 'grey' }, icon: PlayIcon, disabled: kernelStatus !== 'idle' }), _jsx(IconButton, { variant: "invisible", size: "small", color: "secondary", "aria-label": "Run all cells", title: "Run all cells", onClick: e => {
                            e.preventDefault();
                            dispatch(notebookActions.runAll.started(notebookId));
                        }, style: { color: 'grey' }, icon: PaperAirplaneIcon, disabled: kernelStatus !== 'idle' }), _jsx(IconButton, { variant: "invisible", size: "small", color: "error", "aria-label": "Interrupt", onClick: e => {
                            e.preventDefault();
                            dispatch(notebookActions.interrupt.started(notebookId));
                        }, icon: StopIcon, disabled: kernelStatus !== 'busy' }), _jsx(IconButton, { variant: "invisible", size: "small", color: "error", "aria-label": "Delete", title: "Delete", onClick: e => {
                            e.preventDefault();
                            dispatch(notebookActions.delete.started(notebookId));
                        }, icon: TrashIcon })] }), _jsxs(Box, { sx: {
                    display: 'flex',
                    width: '50%',
                    paddingRight: '7vw',
                    gap: '0.75vw',
                    justifyContent: 'flex-end',
                    alignItems: 'center',
                }, children: [_jsx(IconButton, { variant: "invisible", size: "small", color: "primary", "aria-label": "Insert cell", title: "Insert cell", onClick: e => {
                            e.preventDefault();
                            if (type === 'raw') {
                                dispatch(notebookActions.insertBelow.started({
                                    uid: notebookId,
                                    cellType: 'raw',
                                }));
                            }
                            else if (type === 'code') {
                                dispatch(notebookActions.insertBelow.started({
                                    uid: notebookId,
                                    cellType: 'code',
                                }));
                            }
                            else if (type === 'markdown') {
                                dispatch(notebookActions.insertBelow.started({
                                    uid: notebookId,
                                    cellType: 'markdown',
                                }));
                            }
                        }, style: { color: 'grey' }, icon: PlusIcon }), _jsxs(ButtonGroup, { children: [_jsx(Button, { variant: type === 'code' ? 'primary' : 'invisible', onClick: () => handleChangeCellType('code'), size: "small", children: "Code" }), _jsx(Button, { variant: type === 'markdown' ? 'primary' : 'invisible', onClick: () => handleChangeCellType('markdown'), size: "small", children: "Markdown" }), _jsx(Button, { variant: type === 'raw' ? 'primary' : 'invisible', onClick: () => handleChangeCellType('raw'), size: "small", children: "Raw" })] })] })] }));
};
export default NotebookToolbar;
//# sourceMappingURL=NotebookToolbar.js.map