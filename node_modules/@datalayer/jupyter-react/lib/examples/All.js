import { Fragment as _Fragment, jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { createRoot } from 'react-dom/client';
import { useDispatch } from 'react-redux';
import { Box, Button, ButtonGroup } from '@primer/react';
import Jupyter from '../jupyter/Jupyter';
import { useJupyter } from '../jupyter/JupyterContext';
import { Kernel } from '../jupyter/kernel/Kernel';
import Cell from '../components/cell/Cell';
import Notebook from '../components/notebook/Notebook';
import Output from '../components/output/Output';
import FileBrowser from '../components/filebrowser/FileBrowser';
import FileManagerJupyterLab from '../components/filemanager/FileManagerJupyterLab';
import Terminal from '../components/terminal/Terminal';
import CellSidebarNew from '../components/notebook/cell/sidebar/CellSidebarButton';
import CellSidebar from '../components/notebook/cell/sidebar/CellSidebar';
import Console from '../components/console/Console';
import { selectCell, cellActions } from '../components/cell/CellRedux';
import { notebookActions } from '../components/notebook/NotebookRedux';
import notebook from './notebooks/NotebookExample1.ipynb.json';
const SOURCE_1 = '1+1';
const NOTEBOOK_UID_1 = 'notebook-1-uid';
const NOTEBOOK_UID_2 = 'notebook-2-uid';
const NOTEBOOK_UID_3 = 'notebook-3-uid';
const SOURCE_1_OUTPUTS = [
    {
        data: {
            'text/plain': ['2'],
        },
        execution_count: 1,
        metadata: {},
        output_type: 'execute_result',
    },
];
const SOURCE_2 = `import ipywidgets as widgets
widgets.IntSlider(
    value=7,
    min=0,
    max=10,
    step=1
 )`;
const CellPreview = () => {
    const cell = selectCell();
    return (_jsxs(_Fragment, { children: [_jsxs(_Fragment, { children: ["source: ", cell.source] }), _jsxs(_Fragment, { children: ["kernel available: ", String(cell.kernelAvailable)] })] }));
};
const CellToolbar = () => {
    const cell = selectCell();
    const dispatch = useDispatch();
    return (_jsxs(_Fragment, { children: [_jsx(Box, { display: "flex", children: _jsxs(ButtonGroup, { children: [_jsx(Button, { variant: "default", size: "small", onClick: () => dispatch(cellActions.execute()), children: "Run the cell" }), _jsx(Button, { variant: "invisible", size: "small", onClick: () => dispatch(cellActions.outputsCount(0)), children: "Reset outputs count" })] }) }), _jsxs(Box, { children: ["Outputs count: ", cell.outputsCount] })] }));
};
const NotebookToolbar = () => {
    const dispatch = useDispatch();
    return (_jsx(Box, { display: "flex", children: _jsxs(ButtonGroup, { children: [_jsx(Button, { variant: "default", size: "small", onClick: () => dispatch(notebookActions.save.started({
                        uid: NOTEBOOK_UID_1,
                        date: new Date(),
                    })), children: "Save the notebook" }), _jsx(Button, { variant: "default", size: "small", onClick: () => dispatch(notebookActions.runAll.started(NOTEBOOK_UID_1)), children: "Run all" })] }) }));
};
const NotebookKernelChange = () => {
    const { kernelManager, serviceManager } = useJupyter();
    const dispatch = useDispatch();
    const changeKernel = () => {
        if (serviceManager && kernelManager) {
            const kernel = new Kernel({
                kernelManager,
                kernelName: 'defaultKernel',
                kernelSpecName: 'python',
                kernelType: 'notebook',
                kernelspecsManager: serviceManager.kernelspecs,
                sessionManager: serviceManager.sessions,
            });
            kernel.ready.then(() => {
                dispatch(notebookActions.changeKernel({ uid: NOTEBOOK_UID_2, kernel }));
                alert('Kernel is changed.');
            });
        }
    };
    return (_jsxs(_Fragment, { children: [_jsx(Box, { display: "flex", children: _jsx(ButtonGroup, { children: _jsx(Button, { variant: "default", size: "small", onClick: changeKernel, children: "Switch Kernel" }) }) }), _jsx(Notebook, { path: "test.ipynb", CellSidebar: CellSidebar, uid: NOTEBOOK_UID_2 })] }));
};
const Outputs = () => {
    const { defaultKernel } = useJupyter();
    return (_jsxs(_Fragment, { children: [_jsx(Output, { showEditor: true, autoRun: false, kernel: defaultKernel, code: SOURCE_1, outputs: SOURCE_1_OUTPUTS }), _jsx(Output, { showEditor: true, autoRun: false, kernel: defaultKernel, code: SOURCE_2 }), _jsx(Output, { showEditor: true, autoRun: true, kernel: defaultKernel, code: SOURCE_2 })] }));
};
const div = document.createElement('div');
document.body.appendChild(div);
const root = createRoot(div);
root.render(_jsxs(Jupyter, { terminals: true, children: [_jsx(Notebook, { nbformat: notebook, uid: NOTEBOOK_UID_3, height: "calc(100vh - 2.6rem)" // (Height - Toolbar Height).
            , cellSidebarMargin: 60, CellSidebar: CellSidebarNew, Toolbar: NotebookToolbar }), _jsx("hr", {}), _jsx(Console, {}), _jsx("hr", {}), _jsx(CellPreview, {}), _jsx(CellToolbar, {}), _jsx(Cell, {}), _jsx("hr", {}), _jsx(Outputs, {}), _jsx("hr", {}), _jsx(NotebookToolbar, {}), _jsx(Notebook, { path: "ipywidgets.ipynb", CellSidebar: CellSidebar, uid: NOTEBOOK_UID_1 }), _jsx("hr", {}), _jsx(NotebookKernelChange, {}), _jsx("hr", {}), _jsx(FileManagerJupyterLab, {}), _jsx("hr", {}), _jsx(FileBrowser, {}), _jsx("hr", {}), _jsx(Terminal, {})] }));
//# sourceMappingURL=All.js.map