import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState } from 'react';
import { createRoot } from 'react-dom/client';
import { Box, Heading, Textarea, Button } from '@primer/react';
import Jupyter from '../jupyter/Jupyter';
import { useJupyter } from '../jupyter/JupyterContext';
import KernelProgressBar from './../components/kernel/KernelProgressBar';
export const KernelExecResultView = () => {
    const { defaultKernel } = useJupyter();
    const [running, setRunning] = useState(false);
    const [code, setCode] = useState('');
    const [result, setResult] = useState();
    const handleChange = (event) => {
        setCode(event.target.value);
    };
    const exec = async () => {
        setRunning(true);
        setResult('');
        const result = await defaultKernel?.execute(code)?.result;
        setResult(result);
        setRunning(false);
    };
    const interrupt = () => {
        defaultKernel?.interrupt();
    };
    return (_jsxs(Box, { m: 3, children: [_jsx(Heading, { children: "Wait on Code execution with a Promise" }), _jsxs(Box, { children: [_jsx(Textarea, { placeholder: "Enter some code, e.g. print('1+1')", onChange: handleChange, value: code }), _jsxs(Box, { mt: 3, display: "flex", children: [_jsx(Box, { children: _jsx(Button, { disabled: !defaultKernel || running, onClick: exec, variant: !defaultKernel || running ? 'default' : 'primary', children: "Execute" }) }), _jsx(Box, { ml: 3, children: _jsx(Button, { disabled: !running, onClick: interrupt, variant: "danger", children: "Interrupt" }) })] })] }), running && (_jsx(Box, { mt: 3, children: _jsx(KernelProgressBar, {}) })), result && (_jsxs(Box, { mt: 3, children: [_jsx(Heading, { children: "Promise Result" }), _jsx(Box, { children: _jsx("pre", { children: result }) })] }))] }));
};
const KernelExecResult = () => {
    return (_jsx(Jupyter, { children: _jsx(KernelExecResultView, {}) }));
};
const div = document.createElement('div');
document.body.appendChild(div);
const root = createRoot(div);
root.render(_jsx(KernelExecResult, {}));
//# sourceMappingURL=KernelExecResult.js.map