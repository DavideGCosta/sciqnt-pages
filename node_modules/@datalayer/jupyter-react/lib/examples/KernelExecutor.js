import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useEffect, useState } from 'react';
import { createRoot } from 'react-dom/client';
import { Box, Heading } from '@primer/react';
import Jupyter from '../jupyter/Jupyter';
import { useJupyter } from '../jupyter/JupyterContext';
import { Output } from '../components/output/Output';
const CODE = `from time import sleep
for i in range(0, 3):
      sleep(1)
      print("👉 " + str(i))

print("🔁 I am done with looping!")`;
const KernelExecutorView = () => {
    const { defaultKernel } = useJupyter();
    const [outputAreaModel, setOutputAreaModel] = useState();
    const [finalOutputAreaModel, setFinalOutputAreaModel] = useState();
    const [done, setDone] = useState(false);
    useEffect(() => {
        if (defaultKernel?.connection) {
            const iopubMessageHook = (msg) => {
                // Do something with the IOPub message.
                console.log('---iopubMessage', msg);
                return true;
            };
            const shellMessageHook = (msg) => {
                // Do something with the IOPub message.
                console.log('---shellMessage', msg);
                return true;
            };
            const kernelExecutor = defaultKernel.execute(CODE, {
                iopubMessageHooks: [iopubMessageHook],
                shellMessageHooks: [shellMessageHook],
            });
            kernelExecutor?.modelChanged.connect((_, outputAreaModel) => {
                setOutputAreaModel(outputAreaModel);
            });
            kernelExecutor?.done.then(() => {
                setDone(true);
                setFinalOutputAreaModel(kernelExecutor.model);
            });
        }
    }, [defaultKernel?.connection]);
    return (_jsxs(_Fragment, { children: [outputAreaModel && (_jsxs(Box, { children: [_jsx(Heading, { children: "Streaming Output" }), _jsx(Output, { model: outputAreaModel })] })), done && (_jsx(Box, { children: _jsx(Heading, { children: "Done \u2728" }) })), finalOutputAreaModel && (_jsxs(Box, { children: [_jsx(Heading, { children: "Final Output" }), _jsx(Output, { model: finalOutputAreaModel, showControl: false })] }))] }));
};
const KernelExecutor = () => {
    return (_jsx(Jupyter, { children: _jsx(KernelExecutorView, {}) }));
};
const div = document.createElement('div');
document.body.appendChild(div);
const root = createRoot(div);
root.render(_jsx(KernelExecutor, {}));
//# sourceMappingURL=KernelExecutor.js.map