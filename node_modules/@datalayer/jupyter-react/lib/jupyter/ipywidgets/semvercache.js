/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { maxSatisfying } from 'semver';
/**
 * A cache using semver ranges to retrieve values.
 */
export class SemVerCache {
    set(key, version, object) {
        if (!(key in this._cache)) {
            this._cache[key] = Object.create(null);
        }
        if (!(version in this._cache[key])) {
            this._cache[key][version] = object;
        }
        else {
            //      throw `Version ${version} of key ${key} already registered.`;
            console.warn(`Version ${version} of key ${key} already registered.`);
        }
    }
    get(key, semver) {
        if (key in this._cache) {
            const versions = this._cache[key];
            const best = maxSatisfying(Object.keys(versions), semver);
            if (best !== null) {
                return versions[best];
            }
        }
    }
    getAllVersions(key) {
        if (key in this._cache) {
            return this._cache[key];
        }
    }
    _cache = Object.create(null);
}
//# sourceMappingURL=semvercache.js.map