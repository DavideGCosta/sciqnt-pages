import { Kernel } from '@jupyterlab/services';
import { DOMWidgetView, WidgetModel, WidgetView } from '@jupyter-widgets/base/lib/widget';
import { IWidgetRegistryData } from '@jupyter-widgets/base/lib/registry';
import { ICallbacks } from '@jupyter-widgets/base/lib/services-shim';
import { HTMLManager } from '@jupyter-widgets/html-manager/lib/htmlmanager';
import { INotebookModel } from '@jupyterlab/notebook';
import { BundledIPyWidgets, ExternalIPyWidgets } from '../../../components/notebook/Notebook';
/**
 * The class is responsible for the classic IPyWidget rendering.
 */
export declare class ClassicWidgetManager extends HTMLManager {
    _kernelConnection: Kernel.IKernelConnection | null;
    private _commRegistration;
    private _onError;
    private _registry;
    constructor(options?: {
        loader?: (moduleName: string, moduleVersion: string) => Promise<any>;
    });
    /**
     * Load widget state from notebook metadata
     */
    _loadFromNotebook(notebook: INotebookModel): Promise<void>;
    registerWithKernel(kernelConnection: Kernel.IKernelConnection | null): void;
    private _handleCommOpen;
    private _getRegistry;
    get onError(): any;
    display_view(view: Promise<DOMWidgetView> | DOMWidgetView, el: HTMLElement): Promise<void>;
    /**
     * Load a class and return a promise to the loaded object.
     */
    protected loadClass(className: string, moduleName: string, moduleVersion: string): Promise<typeof WidgetModel | typeof WidgetView>;
    callbacks(view: WidgetView): ICallbacks;
    _create_comm(target_name: any, model_id: string, data?: any, metadata?: any, buffers?: ArrayBuffer[] | ArrayBufferView[]): Promise<any>;
    _get_comm_info(): Promise<any>;
    loadBundledIPyWidgets: (ipywidgets: BundledIPyWidgets[]) => void;
    loadExternalIPyWidgets(ipywidgets: ExternalIPyWidgets[]): void;
    register(data: IWidgetRegistryData): void;
}
export default ClassicWidgetManager;
