import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { BaseStyles, Box, ThemeProvider, theme as primerTheme, } from '@primer/react';
import { useMemo } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { getJupyterServerHttpUrl, getJupyterServerWsUrl, loadJupyterConfig, } from './JupyterConfig';
import { JupyterContextProvider } from './JupyterContext';
import JupyterLabCss from './lab/JupyterLabCss';
const script = document.createElement('script');
script.src =
    'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js';
document.body.appendChild(script);
/**
 * The component to be used as fallback in case of error.
 */
const ErrorFallback = ({ error, resetErrorBoundary }) => {
    return (_jsxs("div", { role: "alert", children: [_jsx("p", { children: "Oops, something went wrong." }), _jsx("pre", { children: error.message }), _jsx("div", { style: { visibility: 'hidden' }, children: _jsx("button", { onClick: resetErrorBoundary, children: "Try again" }) })] }));
};
/**
 * The Jupyter context. This handles the needed initialization
 * and ensure the Redux and the Material UI theme providers
 * are available.
 */
export const Jupyter = (props) => {
    const { children, collaborative, colorMode = 'light', defaultKernelName, disableCssLoading = false, initCode = '', injectableStore, jupyterServerHttpUrl, jupyterServerWsUrl, jupyterToken, lite, startDefaultKernel, skeleton, terminals = false, theme = primerTheme, useRunningKernelId, useRunningKernelIndex, } = props;
    const config = useMemo(() => {
        return loadJupyterConfig({
            collaborative,
            jupyterServerHttpUrl,
            jupyterServerWsUrl,
            jupyterToken,
            lite,
            terminals,
        });
    }, [
        collaborative,
        jupyterServerHttpUrl,
        jupyterServerWsUrl,
        jupyterToken,
        lite,
        terminals,
    ]);
    return (_jsx(ErrorBoundary, { FallbackComponent: ErrorFallback, onReset: () => {
            console.log('Error Boundary reset has been invoked...');
        }, children: _jsx(ThemeProvider, { theme: theme, colorMode: colorMode === 'light' ? 'day' : 'night', dayScheme: "light", nightScheme: "dark", children: _jsx(BaseStyles, { children: _jsxs(Box, { color: "fg.default", bg: "canvas.default", children: [!config.insideJupyterLab && !disableCssLoading && (_jsx(JupyterLabCss, { colorMode: colorMode })), _jsx(JupyterContextProvider, { collaborative: collaborative, defaultKernelName: defaultKernelName, injectableStore: injectableStore, initCode: initCode, lite: lite, serverUrls: {
                                baseUrl: getJupyterServerHttpUrl(),
                                wsUrl: getJupyterServerWsUrl(),
                            }, skeleton: skeleton, startDefaultKernel: startDefaultKernel, useRunningKernelId: useRunningKernelId, useRunningKernelIndex: useRunningKernelIndex, children: children })] }) }) }) }));
};
export default Jupyter;
//# sourceMappingURL=Jupyter.js.map