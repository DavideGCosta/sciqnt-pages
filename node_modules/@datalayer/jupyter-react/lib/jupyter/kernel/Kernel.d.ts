import { Kernel as JupyterKernel, KernelMessage, KernelSpec, Session } from '@jupyterlab/services';
import { ISessionConnection } from '@jupyterlab/services/lib/session/session';
import KernelExecutor, { IOPubMessageHook, ShellMessageHook } from './KernelExecutor';
import { IOutputAreaModel } from '@jupyterlab/outputarea';
/**
 * Jupyter Kernel handler
 */
export declare class Kernel {
    private _clientId;
    private _connectionStatus;
    private _id;
    private _info?;
    private _kernelConnection;
    private _kernelManager;
    private _kernelName;
    private _kernelSpecManager;
    private _kernelSpecName;
    private _kernelType;
    private _path;
    private _ready;
    private _session;
    private _sessionId;
    private _sessionManager;
    constructor(props: Kernel.IKernelProps);
    private requestKernel;
    get clientId(): string;
    get connection(): JupyterKernel.IKernelConnection | null;
    get cookieName(): string;
    get id(): string;
    get info(): KernelMessage.IInfoReply | undefined;
    get kernelManager(): JupyterKernel.IManager;
    get kernelSpecManager(): KernelSpec.IManager;
    get path(): string;
    get ready(): Promise<void>;
    get sessionId(): string;
    get session(): ISessionConnection;
    get sessionManager(): Session.IManager;
    /**
     * Execute a code snippet
     *
     * @param code The code snippet
     * @param options Callbacks on IOPub messages and on reply message,
     *  outputs model to populate and execution options
     * @returns The kernel executor
     */
    execute(code: string, { iopubMessageHooks, shellMessageHooks, model, silent, stopOnError, storeHistory, }?: {
        iopubMessageHooks?: IOPubMessageHook[];
        shellMessageHooks?: ShellMessageHook[];
        model?: IOutputAreaModel;
        silent?: boolean;
        stopOnError?: boolean;
        storeHistory?: boolean;
    }): KernelExecutor | undefined;
    /**
     * Interrupt the kernel
     */
    interrupt(): Promise<void>;
    /**
     * Restart the kernel
     */
    restart(): Promise<void>;
    /**
     * Shutdown the kernel
     */
    shutdown(): Promise<void>;
    /**
     * Serialize the kernel to JSON
     */
    toJSON(): {
        path: string;
        id: string;
        clientId: string;
        sessionId: string;
        kernelInfo: KernelMessage.IInfoReply | undefined;
    };
    /**
     * Serialize the kernel to string
     */
    toString(): string;
}
export declare namespace Kernel {
    /**
     * Kernel options
     */
    type IKernelProps = {
        /**
         * Kernel manager
         */
        kernelManager: JupyterKernel.IManager;
        /**
         * Kernel specs manager
         */
        kernelspecsManager: KernelSpec.IManager;
        /**
         * Kernel name
         */
        kernelName: string;
        /**
         * Kernel spec name
         */
        kernelSpecName: string;
        /**
         * Kernel type
         */
        kernelType: 'notebook' | 'file';
        /**
         * Session manager
         */
        sessionManager: Session.IManager;
        /**
         * Kernel model
         */
        kernelModel?: JupyterKernel.IModel;
    };
}
export default Kernel;
