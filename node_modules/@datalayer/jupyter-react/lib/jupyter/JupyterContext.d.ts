import { Kernel as CoreKernel, ServerConnection, ServiceManager } from '@jupyterlab/services';
import type { JupyterLiteServerPlugin } from '@jupyterlite/server';
import React from 'react';
import { InjectableStore } from '../state/redux/Store';
import Kernel from './kernel/Kernel';
export type Lite = boolean | Promise<{
    default: JupyterLiteServerPlugin<any>[];
}>;
/**
 * The type for the Jupyter context.
 */
export type JupyterContextType = {
    /**
     * Whether the component is collaborative or not.
     */
    collaborative?: boolean;
    /**
     * Default kernel
     */
    defaultKernel?: Kernel;
    /**
     * Will be true while waiting for the default kernel.
     *
     * If `true`, it does not ensure a default kernel will
     * be created successfully.
     *
     * This is useful to not mount to quickly a Lumino Widget
     * to be unmount right away when the default kernel will
     * be available.
     */
    defaultKernelIsLoading: boolean;
    injectableStore: InjectableStore;
    kernelManager?: CoreKernel.IManager;
    /**
     * If `true`, it will load the Pyodide jupyterlite kernel.
     *
     * You can also set it to dynamically import any jupyterlite
     * kernel package.
     *
     * If defined, {@link serverUrls} and {@link defaultKernelName}
     * will be ignored and the component will run this in-browser
     * kernel.
     *
     * @example
     * `lite: true` => Load dynamically the package @jupyterlite/pyodide-kernel-extension
     *
     * `lite: import('@jupyterlite/javascript-kernel-extension')` => Load dynamically
     */
    lite?: Lite;
    /**
     * Jupyter Server settings
     *
     * This is useless if running an in-browser kernel via {@link lite}.
     */
    serverSettings: ServerConnection.ISettings;
    /**
     * Jupyter services manager
     */
    serviceManager?: ServiceManager;
    setVariant: (value: string) => void;
    variant: string;
    /**
     * Jupyter Server base URL
     *
     * Useless if running an in-browser kernel.
     */
    baseUrl: string;
    /**
     * Jupyter Server websocket URL
     *
     * Useless if running an in-browser kernel.
     */
    wsUrl: string;
};
/**
 * The instance for the Jupyter context.
 */
export declare const JupyterContext: React.Context<JupyterContextType | undefined>;
export declare const useJupyter: () => JupyterContextType;
/**
 * The type for the Jupyter context consumer.
 */
export declare const JupyterContextConsumer: React.Consumer<JupyterContextType | undefined>;
/**
 * Utility method to ensure the Jupyter context is authenticated
 * with the Jupyter server.
 */
export declare const ensureJupyterAuth: (serverSettings: ServerConnection.ISettings) => Promise<boolean>;
/**
 * Jupyter Server URLs
 */
export interface IServerUrls {
    /**
     * The base url of the server.
     */
    readonly baseUrl: string;
    /**
     * The base ws url of the server.
     */
    readonly wsUrl: string;
}
/**
 * The Jupyter context properties type.
 */
export type JupyterContextProps = React.PropsWithChildren<{
    /**
     * Whether the component is collaborative or not.
     */
    collaborative?: boolean;
    /**
     * Default kernel name
     */
    defaultKernelName?: string;
    /**
     * Code to be executed silently at kernel startup
     *
     * This is ignored if there is no default kernel.
     */
    initCode?: string;
    /**
     * URL to fetch a JupyterLite kernel (i.e. in-browser kernel).
     *
     * If defined, {@link serverUrls} and {@link defaultKernelName}
     * will be ignored and the component will run this in-browser
     * kernel.
     *
     * @example
     * https://cdn.jsdelivr.net/npm/@jupyterlite/pyodide-kernel-extension
     */
    lite?: Lite;
    /**
     * Jupyter Server URLs to connect to.
     *
     * It will be ignored if a {@link lite} is provided.
     */
    serverUrls?: IServerUrls;
    /**
     * Whether to start the default kernel or not.
     */
    startDefaultKernel?: boolean;
    /**
     * A loader to display while the kernel is being setup.
     */
    skeleton?: JSX.Element;
    injectableStore?: InjectableStore;
    useRunningKernelId?: string;
    useRunningKernelIndex?: number;
    variant?: string;
}>;
export declare const createServerSettings: (baseUrl: string, wsUrl: string) => ServerConnection.ISettings;
/**
 * The Jupyter context provider.
 */
export declare const JupyterContextProvider: React.FC<JupyterContextProps>;
