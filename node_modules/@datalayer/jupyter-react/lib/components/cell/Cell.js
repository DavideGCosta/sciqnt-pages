import { jsx as _jsx } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState, useEffect, useMemo } from 'react';
import { useDispatch } from 'react-redux';
import { CodeCell } from '@jupyterlab/cells';
import { Box } from '@primer/react';
import { cellActions, cellReducer } from './CellRedux';
import CellAdapter from './CellAdapter';
import Lumino from '../lumino/Lumino';
import { useJupyter } from './../../jupyter/JupyterContext';
export const Cell = (props) => {
    const { source = '', autoStart } = props;
    const { serverSettings, injectableStore, defaultKernel } = useJupyter();
    const dispatch = useDispatch();
    const [adapter, setAdapter] = useState();
    useMemo(() => {
        injectableStore.inject('cell', cellReducer);
    }, []);
    useEffect(() => {
        if (defaultKernel) {
            defaultKernel.ready.then(() => {
                const adapter = new CellAdapter({
                    source,
                    serverSettings,
                    kernel: defaultKernel,
                });
                dispatch(cellActions.update({ adapter }));
                dispatch(cellActions.source(props.source));
                adapter.codeCell.model.contentChanged.connect((cellModel, changedArgs) => {
                    dispatch(cellActions.source(cellModel.sharedModel.getSource()));
                });
                adapter.codeCell.outputArea.outputLengthChanged.connect((outputArea, outputsCount) => {
                    dispatch(cellActions.outputsCount(outputsCount));
                });
                adapter.sessionContext.initialize().then(() => {
                    if (autoStart) {
                        const execute = CodeCell.execute(adapter.codeCell, adapter.sessionContext);
                        execute.then((msg) => {
                            dispatch(cellActions.update({
                                kernelAvailable: true,
                            }));
                        });
                    }
                });
                setAdapter(adapter);
            });
        }
    }, [source, defaultKernel]);
    return adapter ? (_jsx(Box, { sx: {
            '& .dla-Jupyter-Cell': {
                position: 'relative !important',
                contain: 'content !important',
            },
            '& .jp-Toolbar': {
                height: 'auto !important',
                position: 'relative',
            },
            '& .lm-BoxPanel': {
                position: 'relative',
            },
            '& .jp-Cell': {
                position: 'relative',
            },
            '& .jp-CodeCell': {
                height: 'auto !important',
                position: 'relative',
            },
            '& .jp-Cell-outputArea': {
                paddingBottom: '30px',
            },
            '& .jp-CodeMirrorEditor': {
                cursor: 'text !important',
            },
        }, children: _jsx(Lumino, { children: adapter.panel }) })) : (_jsx(Box, { children: "Loading Jupyter Cell..." }));
};
Cell.defaultProps = {
    source: '',
    autoStart: true,
};
export default Cell;
//# sourceMappingURL=Cell.js.map