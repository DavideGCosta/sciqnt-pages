import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { useDispatch } from 'react-redux';
import { Box } from '@primer/react';
import { useJupyter } from './../../jupyter/JupyterContext';
import Lumino from '../lumino/Lumino';
import { asObservable } from '../lumino/LuminoObservable';
import CellMetadataEditor from './cell/metadata/CellMetadataEditor';
import { newUuid } from '../../utils/Utils';
import NotebookAdapter from './NotebookAdapter';
import { notebookActions, selectNotebookPortals, notebookEpics, notebookReducer, } from './NotebookRedux';
import './Notebook.css';
/**
 * This component creates a Notebook as a collection of snippets
 * with sidebars.
 *
 * @param props The notebook properties.
 * @returns A Notebook React.js component.
 */
export const Notebook = (props) => {
    const { serviceManager, defaultKernel, kernelManager, injectableStore, lite } = useJupyter();
    const { path, kernel: propsKernel, readOnly, nbgrader, height, maxHeight, nbformat, Toolbar, } = props;
    const [uid] = useState(props.uid || newUuid());
    const [adapter, setAdapter] = useState();
    const kernel = propsKernel || defaultKernel;
    const dispatch = useDispatch();
    const portals = selectNotebookPortals(uid);
    const newAdapterState = () => {
        if (uid && serviceManager && kernelManager && kernel) {
            kernel.ready.then(() => {
                const adapter = new NotebookAdapter({
                    ...props,
                    kernel,
                    uid,
                }, injectableStore, serviceManager, lite);
                setAdapter(adapter);
                dispatch(notebookActions.update({ uid, partialState: { adapter: adapter } }));
                adapter.serviceManager.ready.then(() => {
                    if (!readOnly) {
                        const activeCell = adapter.notebookPanel.content.activeCell;
                        if (activeCell) {
                            dispatch(notebookActions.activeCellChange({
                                uid,
                                cellModel: activeCell,
                            }));
                        }
                        const activeCellChanged$ = asObservable(adapter.notebookPanel.content.activeCellChanged);
                        activeCellChanged$.subscribe((cellModel) => {
                            dispatch(notebookActions.activeCellChange({ uid, cellModel }));
                            const panelDiv = document.getElementById('right-panel-id');
                            if (panelDiv) {
                                const cellMetadataOptions = (_jsx(Box, { mt: 3, children: _jsx(CellMetadataEditor, { notebookId: uid, cell: cellModel, nbgrader: nbgrader }) }));
                                const portal = createPortal(cellMetadataOptions, panelDiv);
                                dispatch(notebookActions.setPortalDisplay({
                                    uid,
                                    portalDisplay: { portal, pinned: false },
                                }));
                            }
                        });
                    }
                    adapter.notebookPanel?.model?.contentChanged.connect((notebookModel, _) => {
                        dispatch(notebookActions.modelChange({ uid, notebookModel }));
                    });
                    /*
                    adapter.notebookPanel?.model!.sharedModel.changed.connect((_, notebookChange) => {
                      dispatch(notebookActions.notebookChange({ uid, notebookChange }));
                    });
                    adapter.notebookPanel?.content.modelChanged.connect((notebook, _) => {
                      dispatÃ…ch(notebookActions.notebookChange({ uid, notebook }));
                    });
                    */
                    adapter.notebookPanel?.content.activeCellChanged.connect((_, cellModel) => {
                        if (cellModel === null) {
                            dispatch(notebookActions.activeCellChange({
                                uid,
                                cellModel: undefined,
                            }));
                        }
                        else {
                            dispatch(notebookActions.activeCellChange({ uid, cellModel }));
                        }
                    });
                    adapter.notebookPanel?.sessionContext.statusChanged.connect((_, kernelStatus) => {
                        dispatch(notebookActions.kernelStatusChanged({ uid, kernelStatus }));
                    });
                });
            });
        }
    };
    useEffect(() => {
        injectableStore.inject('notebook', notebookReducer, notebookEpics);
    }, []);
    useEffect(() => {
        newAdapterState();
        return () => {
            if (adapter) {
                adapter.dispose();
            }
            setAdapter(undefined);
            dispatch(notebookActions.setPortalDisplay({ uid, portalDisplay: undefined }));
            dispatch(notebookActions.dispose(uid));
        };
    }, [uid, serviceManager, kernelManager, kernel, path]);
    useEffect(() => {
        if (adapter && nbformat) {
            adapter.setNbformat(nbformat);
        }
    }, [nbformat]);
    return (_jsxs("div", { style: { height, width: '100%', position: 'relative' }, id: "dla-Jupyter-Notebook", children: [Toolbar && _jsx(Toolbar, { notebookId: props.uid }), _jsxs(Box, { className: "dla-Box-Notebook", sx: {
                    '& .dla-Jupyter-Notebook': {
                        height,
                        maxHeight,
                        width: '100%',
                        overflowY: 'hidden',
                    },
                    '& .datalayer-NotebookPanel-header': {
                        minHeight: '50px',
                    },
                    '& .jp-Notebook': {
                        flex: '1 1 auto !important',
                        height: '100%',
                        overflowY: 'scroll',
                    },
                    '& .jp-NotebookPanel': {
                        height: '100% !important',
                        width: '100% !important',
                    },
                    '& .jp-Toolbar': {
                        display: 'none',
                        zIndex: 0,
                    },
                    '& .jp-Toolbar .jp-HTMLSelect.jp-DefaultStyle select': {
                        fontSize: '14px',
                    },
                    '& .jp-Toolbar > .jp-Toolbar-responsive-opener': {
                        display: 'none',
                    },
                    '& .jp-Toolbar-kernelName': {
                        display: 'none',
                    },
                    '& .jp-Cell': {
                        width: `calc(100% - ${props.cellSidebarMargin}px)`,
                    },
                    '& .jp-Notebook-footer': {
                        width: `calc(100% - ${props.cellSidebarMargin + 82}px)`,
                    },
                    '& .jp-Cell .jp-CellHeader': {
                        position: 'absolute',
                        top: '-5px',
                        left: `${props.cellSidebarMargin + 10}px`,
                        height: 'auto',
                    },
                    '& .jp-Cell .dla-CellHeader-Container': {
                        padding: '4px 8px',
                        width: `${props.cellSidebarMargin + 10}px`,
                        marginLeft: 'auto',
                    },
                    '& .jp-CodeMirrorEditor': {
                        cursor: 'text !important',
                    },
                    '.dla-Box-Notebook': {
                        position: 'relative',
                    },
                }, children: [_jsx(_Fragment, { children: portals?.map((portal) => portal) }), _jsx(Box, { children: adapter && _jsx(Lumino, { id: path, children: adapter.panel }) })] })] }));
};
Notebook.defaultProps = {
    cellMetadataPanel: false,
    cellSidebarMargin: 120,
    height: '100vh',
    maxHeight: '100vh',
    nbgrader: false,
    readOnly: false,
    renderers: [],
};
export default Notebook;
//# sourceMappingURL=Notebook.js.map