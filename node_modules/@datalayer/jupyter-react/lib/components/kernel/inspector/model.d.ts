import { VDomModel } from '@jupyterlab/apputils';
import { Kernel } from '@jupyterlab/services';
export type MessageThread = {
    args: Kernel.IAnyMessageArgs;
    children: MessageThread[];
};
/**
 * An iterator class which itterates over the message thread being received
 */
export declare class ThreadIterator {
    constructor(threads: MessageThread[], collapsed: {
        [key: string]: boolean;
    });
    iter(): this;
    [Symbol.iterator](): {
        next: () => {
            value: ThreadIterator.IElement;
            done: boolean;
        } | {
            done: boolean;
            value?: undefined;
        };
    };
    next(): ThreadIterator.IElement | undefined;
    clone(): ThreadIterator;
    private _index;
    private _child;
    private _threads;
    private _collapsed;
}
export declare namespace ThreadIterator {
    interface IElement {
        args: Kernel.IAnyMessageArgs;
        hasChildren: boolean;
    }
}
/**
 * Model for a kernel spy.
 */
export declare class KernelSpyModel extends VDomModel {
    constructor(kernel?: Kernel.IKernelConnection | null);
    clear(): void;
    get kernel(): Kernel.IKernelConnection | null;
    set kernel(value: Kernel.IKernelConnection | null);
    get log(): ReadonlyArray<Kernel.IAnyMessageArgs>;
    get tree(): MessageThread[];
    depth(args: Kernel.IAnyMessageArgs | null): number;
    getThread(msgId: string, ancestors?: boolean): MessageThread;
    protected onMessage(sender: Kernel.IKernelConnection, args: Kernel.IAnyMessageArgs): void;
    private _findParent;
    private _log;
    private _kernel;
    private _messages;
    private _childLUT;
    private _roots;
}
