import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState, useEffect } from 'react';
import { Table, DataTable, Blankslate } from '@primer/react/drafts';
import { Box, Text, IconButton, Spinner } from '@primer/react';
import { CrossMarkIcon, JupyterIcon, NotebookIcon, } from '@datalayer/icons-react';
import { JSONExt } from '@lumino/coreutils';
import { useJupyter } from '../../jupyter/JupyterContext';
export const Kernels = () => {
    const { serviceManager } = useJupyter();
    const [kernels, setKernels] = useState();
    const [kernelSpecInfos, setKernelSpecInfos] = useState(new Map());
    const refreshKernels = (serviceManager) => {
        setKernels(Array.from(serviceManager.kernels.running()));
    };
    useEffect(() => {
        serviceManager?.kernels.refreshRunning().then(() => {
            const kernels = Array.from(serviceManager.kernels.running());
            setKernels(kernels);
        });
        serviceManager?.kernelspecs.refreshSpecs().then(() => {
            const kernelSpecs = Object.values(serviceManager.kernelspecs.specs.kernelspecs);
            // Look for new kernel specifications
            const newSpecs = new Map();
            kernelSpecs.forEach(kernelSpec => {
                const kernelSpecName = kernelSpec?.name;
                if (kernelSpecName?.startsWith('run-')) {
                    const metadata = kernelSpec?.metadata;
                    if (metadata) {
                        const oldInfo = kernelSpecInfos.get(kernelSpecName);
                        const newInfo = {
                            description: metadata['description'],
                            notebookExampleUrl: metadata['notebook_example_url'],
                        };
                        if (!JSONExt.deepEqual(oldInfo ?? {}, newInfo)) {
                            newSpecs.set(kernelSpecName, newInfo);
                        }
                    }
                }
            });
            const newSpecInfos = new Map([...kernelSpecInfos, ...newSpecs]);
            if (newSpecs.size) {
                setKernelSpecInfos(newSpecInfos);
            }
        });
    }, [serviceManager]);
    const deleteKernel = (serviceManager, kernelId) => {
        serviceManager.kernels.shutdown(kernelId).then(() => {
            console.log(`Kernel ${kernelId} is terminated.`);
            refreshKernels(serviceManager);
        });
    };
    return (_jsx(Box, { mt: 3, style: { width: '1000px' }, children: kernels ? (_jsxs(Table.Container, { children: [_jsx(Table.Title, { as: "h2", id: "images", children: "Kernels" }), _jsx(Table.Subtitle, { as: "p", id: "images-subtitle", children: "Available kernels." }), _jsx(DataTable, { "aria-labelledby": "running-kernels", "aria-describedby": "running-kernels-subtitle", data: kernels, columns: [
                        {
                            header: 'Name',
                            field: 'name',
                            renderCell: row => _jsx(Text, { children: row.name }),
                        },
                        {
                            header: 'Description',
                            id: 'description',
                            renderCell: row => (_jsx(Text, { children: kernelSpecInfos.get(row.name)?.description })),
                        },
                        {
                            header: 'State',
                            field: 'execution_state',
                            renderCell: row => _jsx(Text, { children: row.execution_state }),
                        },
                        {
                            header: 'Example',
                            id: 'example-action',
                            renderCell: row => (_jsx(_Fragment, { children: _jsx(IconButton, { "aria-label": `Create an example notebook for kernel ${row.name}`, icon: NotebookIcon, size: "small", onClick: () => { } }) })),
                        },
                        {
                            header: 'Delete',
                            id: 'delete-action',
                            renderCell: row => (_jsx(_Fragment, { children: _jsx(IconButton, { "aria-label": `Delete the kernel ${row.name}`, icon: CrossMarkIcon, size: "small", onClick: () => {
                                        deleteKernel(serviceManager, row.id);
                                    } }) })),
                        },
                    ] })] })) : (_jsxs(Blankslate, { border: true, children: [_jsx(Blankslate.Visual, { children: _jsx(JupyterIcon, { size: "medium" }) }), _jsx(Blankslate.Heading, { children: "Kernels" }), _jsx(Blankslate.Description, { children: _jsxs(Box, { sx: { textAlign: 'center' }, children: [_jsx(Box, { children: _jsx(Spinner, {}) }), _jsx(Box, { children: "No kernel found so far..." })] }) })] })) }));
};
export default Kernels;
//# sourceMappingURL=Kernels.js.map