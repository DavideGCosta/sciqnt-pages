/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { OutputAreaModel, SimplifiedOutputArea } from '@jupyterlab/outputarea';
import { closeIcon, searchIcon } from '@jupyterlab/ui-components';
import { DataGrid } from '@lumino/datagrid';
import { Widget } from '@lumino/widgets';
import { provideJupyterDesignSystem, jpDataGrid, jpDataGridRow, jpDataGridCell, jpTextField, jpOption, jpSelect, jpButton, } from '@jupyter/web-components';
provideJupyterDesignSystem().register(jpDataGrid(), jpDataGridRow(), jpDataGridCell(), jpTextField(), jpOption(), jpSelect(), jpButton());
import wildcardMatch from 'wildcard-match';
const TITLE_CLASS = 'jp-VarInspector-title';
const PANEL_CLASS = 'jp-VarInspector';
const TABLE_CLASS = 'jp-VarInspector-table';
const TABLE_ROW_CLASS = 'jp-VarInspector-table-row';
const TABLE_ROW_HIDDEN_CLASS = 'jp-VarInspector-table-row-hidden';
const TABLE_TYPE_CLASS = 'jp-VarInspector-type';
const TABLE_NAME_CLASS = 'jp-VarInspector-varName';
const FILTER_TYPE_CLASS = 'filter-type';
const FILTER_INPUT_CLASS = 'filter-input';
const FILTER_BUTTON_CLASS = 'filter-button';
const FILTER_LIST_CLASS = 'filter-list';
const FILTERED_BUTTON_CLASS = 'filtered-variable-button';
/**
 * A panel that renders the variables
 */
export class VariableInspectorPanel extends Widget {
    _source = null;
    _table;
    _filteredTable;
    _title;
    _filtered;
    constructor() {
        super();
        this.addClass(PANEL_CLASS);
        this._title = Private.createTitle();
        this._title.className = TITLE_CLASS;
        this._table = Private.createTable();
        this._table.className = TABLE_CLASS;
        this._filteredTable = Private.createFilterTable();
        this.node.appendChild(this._title);
        this.node.appendChild(this._filteredTable);
        this.node.appendChild(this._table);
        this._filtered = { type: [], name: [] };
        this.intializeFilteredTable();
    }
    //Sets up the filter table so when the filter button is pressed, a new filter is created
    intializeFilteredTable() {
        const filterType = this._filteredTable.querySelector('.' + FILTER_TYPE_CLASS);
        const filterInput = this._filteredTable.querySelector('.' + FILTER_INPUT_CLASS);
        const filterButton = this._filteredTable.querySelector('.' + FILTER_BUTTON_CLASS);
        filterButton.addEventListener('click', () => {
            this.onFilterChange(filterType.value, filterInput.value, true);
        });
    }
    // Checks if string is in the filtered array
    stringInFilter(string, filterType) {
        // console.log(this._filtered[filterType]);
        for (let i = 0; i < this._filtered[filterType].length; i++) {
            const isMatch = wildcardMatch(this._filtered[filterType][i]);
            if (isMatch(string)) {
                return true;
            }
        }
        return false;
    }
    /*
      Either adds a new filter or removes a previously existing filter based
      Params:
      filterType: By what type the varName is filtering on
      varName: The name of the variable we are trying to filter out
      isAdding: If we are adding a new filter or removing a previous filter
    */
    onFilterChange(filterType, varName, isAdding) {
        if (varName === '') {
            return;
        }
        if (isAdding) {
            if (this._filtered[filterType].includes(varName)) {
                return;
            }
            this._filtered[filterType].push(varName);
            const filterList = this._filteredTable.querySelector('.' + FILTER_LIST_CLASS);
            const newFilteredButton = Private.createFilteredButton(varName, filterType);
            newFilteredButton.addEventListener('click', () => {
                const filterText = newFilteredButton.querySelector('.filtered-variable-button-text');
                this.onFilterChange(filterType, filterText.innerHTML, false);
                this.addFilteredOutRows();
                newFilteredButton.remove();
            });
            filterList.appendChild(newFilteredButton);
            this.filterOutTable();
        }
        else {
            this._filtered[filterType] = this._filtered[filterType].filter(filter => filter !== varName);
        }
    }
    /*
    Goes through each filtered out row and checks if they should still be filtered
    If not, the row becomes visible again
    */
    addFilteredOutRows() {
        const rows = this._table.querySelectorAll('.' + TABLE_ROW_HIDDEN_CLASS);
        for (let i = 0; i < rows.length; i++) {
            const rowName = rows[i].querySelector('.' + TABLE_NAME_CLASS);
            const rowType = rows[i].querySelector('.' + TABLE_TYPE_CLASS);
            if (!this.stringInFilter(rowName.innerHTML, 'name') &&
                !this._filtered['type'].includes(rowType.innerHTML)) {
                rows[i].className = TABLE_ROW_CLASS;
            }
        }
    }
    /*
    Goes through each row and checks if the row should be filtered out
    A row is filtered out if it matches any of the values in the _filtered object
    */
    filterOutTable() {
        const rows = this._table.querySelectorAll('.' + TABLE_ROW_CLASS);
        for (let i = 0; i < rows.length; i++) {
            const rowName = rows[i].querySelector('.' + TABLE_NAME_CLASS);
            const rowType = rows[i].querySelector('.' + TABLE_TYPE_CLASS);
            if (this.stringInFilter(rowName.innerHTML, 'name') ||
                this._filtered['type'].includes(rowType.innerHTML)) {
                rows[i].className = TABLE_ROW_HIDDEN_CLASS;
            }
        }
    }
    /*
    Goes through each row and if it finds a variable with name 'name', then it deletes it
    */
    removeRow(name) {
        const rows = this._table.querySelectorAll('.' + TABLE_ROW_CLASS);
        for (let i = 0; i < rows.length; i++) {
            const cell = rows[i].querySelector('.' + TABLE_NAME_CLASS);
            if (cell.innerHTML === name) {
                rows[i].remove();
                return;
            }
        }
    }
    get source() {
        return this._source;
    }
    set source(source) {
        if (this._source === source) {
            // this._source.performInspection();
            return;
        }
        //Remove old subscriptions
        if (this._source) {
            this._source.inspected.disconnect(this.onInspectorUpdate, this);
            this._source.disposed.disconnect(this.onSourceDisposed, this);
        }
        this._source = source;
        //Subscribe to new object
        if (this._source) {
            this._source.inspected.connect(this.onInspectorUpdate, this);
            this._source.disposed.connect(this.onSourceDisposed, this);
            this._source.performInspection();
        }
    }
    /**
     * Dispose resources
     */
    dispose() {
        if (this.isDisposed) {
            return;
        }
        this.source = null;
        super.dispose();
    }
    onInspectorUpdate(sender, allArgs) {
        if (!this.isAttached) {
            return;
        }
        const title = allArgs.title;
        const args = allArgs.payload;
        if (title.contextName) {
            this._title.innerHTML = title.contextName;
        }
        else {
            this._title.innerHTML =
                "    Inspecting '" + title.kernelName + "' " + title.contextName;
        }
        this._table.innerHTML = '';
        const headerRow = document.createElement('jp-data-grid-row');
        headerRow.className = 'sticky-header';
        const columns = [' ', ' ', 'NAME', 'TYPE', 'SIZE', 'SHAPE', 'CONTENT'];
        for (let i = 0; i < columns.length; i++) {
            const headerCell = document.createElement('jp-data-grid-cell');
            headerCell.className = 'column-header';
            headerCell.textContent = columns[i];
            headerCell.gridColumn = (i + 1).toString();
            headerRow.appendChild(headerCell);
        }
        this._table.appendChild(headerRow);
        //Render new variable state
        for (let index = 0; index < args.length; index++) {
            const item = args[index];
            const name = item.varName;
            const varType = item.varType;
            const row = document.createElement('jp-data-grid-row');
            row.className = TABLE_ROW_CLASS;
            if (this._filtered['type'].includes(varType)) {
                row.className = TABLE_ROW_HIDDEN_CLASS;
            }
            else if (this.stringInFilter(name, 'name')) {
                row.className = TABLE_ROW_HIDDEN_CLASS;
            }
            // Add delete icon and onclick event
            let cell = document.createElement('jp-data-grid-cell');
            cell.title = 'Delete Variable';
            cell.className = 'jp-VarInspector-deleteButton';
            cell.gridColumn = '1';
            const closeButton = document.createElement('jp-button');
            closeButton.appearance = 'stealth';
            const ico = closeIcon.element();
            ico.className = 'icon-button';
            ico.onclick = (ev) => {
                this.removeRow(name);
            };
            closeButton.append(ico);
            cell.append(closeButton);
            row.appendChild(cell);
            // Add onclick event for inspection
            cell = document.createElement('jp-data-grid-cell');
            if (item.isMatrix) {
                cell.title = 'View Contents';
                cell.className = 'jp-VarInspector-inspectButton';
                const searchButton = document.createElement('jp-button');
                searchButton.appearance = 'stealth';
                const ico = searchIcon.element();
                ico.className = 'icon-button';
                ico.onclick = (ev) => {
                    this._source
                        ?.performMatrixInspection(item.varName)
                        .then((model) => {
                        this._showMatrix(model, item.varName, item.varType);
                    });
                };
                searchButton.append(ico);
                cell.append(searchButton);
            }
            else {
                cell.innerHTML = '';
            }
            cell.gridColumn = '2';
            row.appendChild(cell);
            cell = document.createElement('jp-data-grid-cell');
            cell.className = TABLE_NAME_CLASS;
            cell.innerHTML = name;
            cell.gridColumn = '3';
            row.appendChild(cell);
            // Add remaining cells
            cell = document.createElement('jp-data-grid-cell');
            cell.innerHTML = varType;
            cell.className = TABLE_TYPE_CLASS;
            cell.gridColumn = '4';
            row.appendChild(cell);
            cell = document.createElement('jp-data-grid-cell');
            cell.innerHTML = item.varSize;
            cell.gridColumn = '5';
            row.appendChild(cell);
            cell = document.createElement('jp-data-grid-cell');
            cell.innerHTML = item.varShape;
            cell.gridColumn = '6';
            row.appendChild(cell);
            cell = document.createElement('jp-data-grid-cell');
            const rendermime = this._source?.rendermime;
            if (item.isWidget && rendermime) {
                const model = new OutputAreaModel({ trusted: true });
                const output = new SimplifiedOutputArea({ model, rendermime });
                output.future = this._source.performWidgetInspection(item.varName);
                Widget.attach(output, cell);
            }
            else {
                cell.innerHTML = Private.escapeHtml(item.varContent).replace(/\\n/g, '</br>');
            }
            cell.gridColumn = '7';
            row.appendChild(cell);
            this._table.appendChild(row);
        }
    }
    /**
     * Handle source disposed signals.
     */
    onSourceDisposed(sender, args) {
        this.source = null;
    }
    _showMatrix(dataModel, name, varType) {
        const datagrid = new DataGrid({
            defaultSizes: {
                rowHeight: 32,
                columnWidth: 128,
                rowHeaderWidth: 64,
                columnHeaderHeight: 32,
            },
        });
        datagrid.dataModel = dataModel;
        datagrid.title.label = varType + ': ' + name;
        datagrid.title.closable = true;
        const lout = this.parent.layout;
        lout.addWidget(datagrid, { mode: 'split-right' });
        //todo activate/focus matrix widget
    }
}
var Private;
(function (Private) {
    const entityMap = new Map(Object.entries({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '/': '&#x2F;',
    }));
    function escapeHtml(source) {
        return String(source).replace(/[&<>"'/]/g, (s) => entityMap.get(s));
    }
    Private.escapeHtml = escapeHtml;
    function createTable() {
        const table = document.createElement('jp-data-grid');
        table.generateHeader = 'sticky';
        table.gridTemplateColumns = '1fr 1fr 6fr 4fr 4fr 5fr 16fr';
        return table;
    }
    Private.createTable = createTable;
    function createTitle(header = '') {
        const title = document.createElement('p');
        title.innerHTML = header;
        return title;
    }
    Private.createTitle = createTitle;
    function createFilterTable() {
        const container = document.createElement('div');
        container.className = 'filter-container';
        const filterType = document.createElement('jp-select');
        filterType.className = FILTER_TYPE_CLASS;
        filterType.selectedIndex = 0;
        const varTypeOption = document.createElement('jp-option');
        varTypeOption.value = 'type';
        varTypeOption.innerHTML = 'Type';
        const nameOption = document.createElement('jp-option');
        nameOption.value = 'name';
        nameOption.innerHTML = 'Name';
        filterType.appendChild(varTypeOption);
        filterType.appendChild(nameOption);
        const searchContainer = document.createElement('div');
        searchContainer.className = 'jp-InputGroup filter-search-container';
        const input = document.createElement('jp-text-field');
        input.setAttribute('type', 'text');
        input.setAttribute('placeholder', 'Filter out variable');
        input.className = FILTER_INPUT_CLASS;
        const filterButton = document.createElement('jp-button');
        filterButton.textContent = 'Filter';
        filterButton.className = FILTER_BUTTON_CLASS;
        filterButton.appearance = 'accent';
        const list = document.createElement('ul');
        list.className = FILTER_LIST_CLASS;
        searchContainer.appendChild(filterType);
        searchContainer.appendChild(input);
        searchContainer.appendChild(filterButton);
        container.appendChild(searchContainer);
        container.appendChild(list);
        return container;
    }
    Private.createFilterTable = createFilterTable;
    //Creates a button with given filter information displayed on the button
    function createFilteredButton(filterName, filterType) {
        const filteredButton = document.createElement('jp-button');
        filteredButton.value = filterType;
        filteredButton.title = filterType;
        filteredButton.className = FILTERED_BUTTON_CLASS;
        const filterButtonContent = document.createElement('div');
        filterButtonContent.className = 'filter-button-content';
        const buttonText = document.createElement('div');
        buttonText.className = 'filtered-variable-button-text';
        buttonText.innerHTML = filterName;
        const icon = closeIcon.element({
            container: filterButtonContent,
        });
        filterButtonContent.appendChild(buttonText);
        filterButtonContent.appendChild(icon);
        filteredButton.appendChild(filterButtonContent);
        filteredButton.className = FILTERED_BUTTON_CLASS;
        return filteredButton;
    }
    Private.createFilteredButton = createFilteredButton;
})(Private || (Private = {}));
//# sourceMappingURL=widget.js.map