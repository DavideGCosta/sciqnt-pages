/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { Signal } from '@lumino/signaling';
import { JSONModel } from '@lumino/datagrid';
class AbstractHandler {
    _isDisposed = false;
    _disposed = new Signal(this);
    _inspected = new Signal(this);
    _connector;
    _rendermime = null;
    constructor(connector) {
        this._connector = connector;
    }
    get disposed() {
        return this._disposed;
    }
    get isDisposed() {
        return this._isDisposed;
    }
    get inspected() {
        return this._inspected;
    }
    get rendermime() {
        return this._rendermime;
    }
    dispose() {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        this._disposed.emit();
        Signal.clearData(this);
    }
    performDelete(varName) {
        //noop
    }
}
/**
 * An object that handles code inspection.
 */
export class VariableInspectionHandler extends AbstractHandler {
    _initScript;
    _queryCommand;
    _matrixQueryCommand;
    _widgetQueryCommand;
    _deleteCommand;
    _ready;
    _id;
    constructor(options) {
        super(options.connector);
        this._id = options.id;
        this._rendermime = options.rendermime ?? null;
        this._queryCommand = options.queryCommand;
        this._matrixQueryCommand = options.matrixQueryCommand;
        this._widgetQueryCommand = options.widgetQueryCommand;
        this._deleteCommand = options.deleteCommand;
        this._initScript = options.initScript;
        this._ready = this._connector.ready.then(() => {
            this._initOnKernel().then((msg) => {
                this._connector.iopubMessage.connect(this._queryCall);
                return;
            });
        });
        this._connector.kernelRestarted.connect((sender, kernelReady) => {
            const title = {
                contextName: '<b>Restarting kernel...</b> ',
            };
            this._inspected.emit({
                title: title,
                payload: [],
            });
            this._ready = kernelReady.then(() => {
                this._initOnKernel().then((msg) => {
                    this._connector.iopubMessage.connect(this._queryCall);
                    this.performInspection();
                });
            });
        });
    }
    get id() {
        return this._id;
    }
    get ready() {
        return this._ready;
    }
    /**
     * Performs an inspection by sending an execute request with the query command to the kernel.
     */
    performInspection() {
        const content = {
            code: this._queryCommand,
            stop_on_error: false,
            store_history: false,
        };
        this._connector.fetch(content, this._handleQueryResponse);
    }
    /**
     * Performs an inspection of a Jupyter Widget
     */
    performWidgetInspection(varName) {
        const request = {
            code: this._widgetQueryCommand + '(' + varName + ')',
            stop_on_error: false,
            store_history: false,
        };
        return this._connector.execute(request);
    }
    /**
     * Performs an inspection of the specified matrix.
     */
    performMatrixInspection(varName, maxRows = 100000) {
        const request = {
            code: this._matrixQueryCommand + '(' + varName + ', ' + maxRows + ')',
            stop_on_error: false,
            store_history: false,
        };
        const con = this._connector;
        return new Promise((resolve, reject) => {
            con.fetch(request, (response) => {
                const msgType = response.header.msg_type;
                switch (msgType) {
                    case 'execute_result': {
                        const payload = response.content;
                        let content = payload.data['text/plain'];
                        content = content.replace(/^'|'$/g, '');
                        content = content.replace(/\\"/g, '"');
                        content = content.replace(/\\'/g, "\\\\'");
                        const modelOptions = JSON.parse(content);
                        const jsonModel = new JSONModel(modelOptions);
                        resolve(jsonModel);
                        break;
                    }
                    case 'error':
                        console.error(response);
                        reject("Kernel error on 'matrixQuery' call!");
                        break;
                    default:
                        break;
                }
            });
        });
    }
    /**
     * Send a kernel request to delete a variable from the global environment
     */
    performDelete(varName) {
        const content = {
            code: this._deleteCommand + "('" + varName + "')",
            stop_on_error: false,
            store_history: false,
        };
        this._connector.fetch(content, this._handleQueryResponse);
    }
    /**
     * Initializes the kernel by running the set up script located at _initScriptPath.
     */
    _initOnKernel() {
        const content = {
            code: this._initScript,
            stop_on_error: false,
            silent: true,
        };
        return this._connector.fetch(content, () => {
            //no op
        });
    }
    /*
     * Handle query response. Emit new signal containing the IVariableInspector.IInspectorUpdate object.
     * (TODO: query resp. could be forwarded to panel directly)
     */
    _handleQueryResponse = (response) => {
        const msgType = response.header.msg_type;
        switch (msgType) {
            case 'execute_result': {
                const payload = response.content;
                let content = payload.data['text/plain'];
                if (content.slice(0, 1) === "'" || content.slice(0, 1) === '"') {
                    content = content.slice(1, -1);
                    content = content.replace(/\\"/g, '"').replace(/\\'/g, "'");
                }
                const update = JSON.parse(content);
                const title = {
                    contextName: '',
                    kernelName: this._connector.kernelName || '',
                };
                this._inspected.emit({ title: title, payload: update });
                break;
            }
            case 'display_data': {
                const payloadDisplay = response.content;
                let contentDisplay = payloadDisplay.data['text/plain'];
                if (contentDisplay.slice(0, 1) === "'" ||
                    contentDisplay.slice(0, 1) === '"') {
                    contentDisplay = contentDisplay.slice(1, -1);
                    contentDisplay = contentDisplay
                        .replace(/\\"/g, '"')
                        .replace(/\\'/g, "'");
                }
                const updateDisplay = JSON.parse(contentDisplay);
                const titleDisplay = {
                    contextName: '',
                    kernelName: this._connector.kernelName || '',
                };
                this._inspected.emit({ title: titleDisplay, payload: updateDisplay });
                break;
            }
            default:
                break;
        }
    };
    /*
     * Invokes a inspection if the signal emitted from specified session is an 'execute_input' msg.
     */
    _queryCall = (kernel, msg) => {
        const msgType = msg.header.msg_type;
        switch (msgType) {
            case 'execute_input': {
                const code = msg.content.code;
                if (!(code === this._queryCommand) &&
                    !(code === this._matrixQueryCommand) &&
                    !code.startsWith(this._widgetQueryCommand)) {
                    this.performInspection();
                }
                break;
            }
            default:
                break;
        }
    };
}
export class DummyHandler extends AbstractHandler {
    constructor(connector) {
        super(connector);
    }
    performInspection() {
        const title = {
            contextName: '. <b>Language currently not supported.</b> ',
            kernelName: this._connector.kernelName || '',
        };
        this._inspected.emit({
            title: title,
            payload: [],
        });
    }
    performMatrixInspection(varName, maxRows) {
        return new Promise((resolve, reject) => {
            reject('Cannot inspect matrices w/ the DummyHandler!');
        });
    }
    performWidgetInspection(varName) {
        const request = {
            code: '',
            stop_on_error: false,
            store_history: false,
        };
        return this._connector.execute(request);
    }
}
//# sourceMappingURL=handler.js.map