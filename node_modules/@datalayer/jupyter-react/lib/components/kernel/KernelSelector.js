import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState, useEffect } from 'react';
import { ActionMenu, ActionList, IconButton } from '@primer/react';
import { JupyterKernelIcon, JupyterKernelGalileoIcon, } from '@datalayer/icons-react';
import { useJupyter } from '../../jupyter/JupyterContext';
export const KernelSelector = (props) => {
    const { selectKernel, selectKernelSpec } = props;
    const { serviceManager } = useJupyter();
    const [kernels, setKernels] = useState();
    const [kernelSpecs, setKernelSpecs] = useState();
    useEffect(() => {
        serviceManager?.ready.then(() => {
            serviceManager.kernelspecs.refreshSpecs().then(() => {
                const kernelSpecs = serviceManager.kernelspecs.specs?.kernelspecs;
                setKernelSpecs(kernelSpecs);
            });
        });
        serviceManager?.kernels.refreshRunning().then(() => {
            const kernels = Array.from(serviceManager.kernels.running());
            setKernels(kernels);
        });
    }, [serviceManager]);
    return (_jsx(_Fragment, { children: _jsxs(ActionMenu, { children: [_jsx(ActionMenu.Anchor, { children: _jsx(IconButton, { "aria-labelledby": "", icon: JupyterKernelGalileoIcon, variant: "invisible" }) }), _jsx(ActionMenu.Overlay, { width: "large", children: _jsxs(ActionList, { showDividers: true, children: [kernels && (_jsx(ActionList.Group, { title: "Connect to a running Kernel", children: kernels.map(kernel => {
                                    return (_jsxs(ActionList.Item, { onSelect: e => {
                                            selectKernel(kernel);
                                        }, children: [_jsx(ActionList.LeadingVisual, { children: _jsx(JupyterKernelIcon, {}) }), kernel.name, _jsx(ActionList.Description, { variant: "block", children: kernel.id })] }));
                                }) })), _jsx(ActionList.Group, { title: "Launch a new Kernel", children: kernelSpecs &&
                                    Object.values(kernelSpecs).map(specModel => {
                                        return (_jsxs(ActionList.Item, { onSelect: e => {
                                                selectKernelSpec(specModel);
                                            }, children: [_jsx(ActionList.LeadingVisual, { children: _jsx(JupyterKernelGalileoIcon, {}) }), specModel?.name, _jsx(ActionList.Description, { variant: "block", children: specModel?.display_name })] }));
                                    }) })] }) })] }) }));
};
export default KernelSelector;
//# sourceMappingURL=KernelSelector.js.map