import { jsx as _jsx } from "react/jsx-runtime";
/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { useState, useEffect } from 'react';
import { Tooltip } from '@primer/react';
import { CircleBlackIcon, CircleBrownIcon, CircleGreenIcon, CircleHollowRedIcon, CircleOrangeIcon, CirclePurpleIcon, CircleRedIcon, CircleWhiteIcon, CircleYellowIcon, CircledMIcon, SquareWhiteLargeIcon } from '@datalayer/icons-react';
/**
 * The valid kernel connection states.
 *
 * #### Notes
 * The status states are:
 * * `connected`: The kernel connection is live.
 * * `connecting`: The kernel connection is not live, but we are attempting
 *   to reconnect to the kernel.
 * * `disconnected`: The kernel connection is permanently down, we will not
 *   try to reconnect.
 *
 * When a kernel connection is `connected`, the kernel status should be
 * valid. When a kernel connection is either `connecting` or `disconnected`,
 * the kernel status will be `unknown` unless the kernel status was `dead`,
 * in which case it stays `dead`.
 *
 * Status = 'unknown' | 'starting' | 'idle' | 'busy' | 'terminating' | 'restarting' | 'autorestarting' | 'dead';
 */
export const KERNEL_STATES = new Map([
    ['connecting', _jsx(CircleBlackIcon, {})],
    ['connected-unknown', _jsx(CircledMIcon, {})],
    ['connected-starting', _jsx(CircleYellowIcon, {})],
    ['connected-idle', _jsx(CircleGreenIcon, {})],
    ['connected-busy', _jsx(CircleOrangeIcon, {})],
    ['connected-terminating', _jsx(CircleWhiteIcon, {})],
    ['connected-restarting', _jsx(CirclePurpleIcon, {})],
    ['connected-autorestarting', _jsx(CircleHollowRedIcon, {})],
    ['connected-dead', _jsx(CircleRedIcon, {})],
    ['disconnecting', _jsx(CircleBrownIcon, {})],
    ['undefined', _jsx(SquareWhiteLargeIcon, {})],
]);
export const KernelIndicator = (props) => {
    const { kernel, env } = props;
    const [connectionStatus, setConnectionStatus] = useState();
    const [status, setStatus] = useState();
    const toState = (connectionStatus, status) => {
        if (connectionStatus === 'connecting' ||
            connectionStatus === 'disconnected') {
            return connectionStatus;
        }
        return connectionStatus + '-' + status;
    };
    useEffect(() => {
        if (kernel) {
            setConnectionStatus(kernel?.connectionStatus);
            setStatus(kernel?.status);
            kernel.connectionStatusChanged.connect((_, connectionStatus) => {
                setConnectionStatus(connectionStatus);
            });
            kernel.statusChanged.connect((_, status) => {
                setStatus(status);
            });
        }
    }, [kernel]);
    return connectionStatus && status ? (_jsx(Tooltip, { "aria-label": `${connectionStatus} - ${status} - ${env?.display_name}`, children: KERNEL_STATES.get(toState(connectionStatus, status)) })) : (_jsx(Tooltip, { "aria-label": "Undefined state", children: KERNEL_STATES.get('undefined') }));
};
export default KernelIndicator;
//# sourceMappingURL=Kernelndicator.js.map