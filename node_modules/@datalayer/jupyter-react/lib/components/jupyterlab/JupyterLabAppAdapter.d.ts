import { CommandRegistry } from '@lumino/commands';
import { BoxPanel, Widget, FocusTracker } from '@lumino/widgets';
import { JupyterLab, JupyterFrontEndPlugin, JupyterFrontEnd, LabShell } from '@jupyterlab/application';
import { DocumentRegistry } from '@jupyterlab/docregistry';
import { IRenderMime } from '@jupyterlab/rendermime-interfaces';
import { ServiceManager } from '@jupyterlab/services';
import { JupyterLabAppProps } from './JupyterLabApp';
type Plugin = JupyterFrontEndPlugin<any, any, any> & {
    service: any;
};
type Plugins = Map<string, Plugin>;
type Props = JupyterLabAppProps & {
    serviceManager: ServiceManager;
    collaborative?: boolean;
};
export declare class JupyterLabAppAdapter {
    private _jupyterLab;
    private _shell;
    private _plugins;
    private _ready;
    private _readyResolve;
    constructor(props: Props, jupyterlab?: JupyterLab);
    private load;
    static create(jupyterLab: JupyterLab): JupyterLabAppAdapter;
    get jupyterLab(): JupyterLab;
    get shell(): LabShell;
    get docRegistry(): DocumentRegistry;
    get commands(): CommandRegistry;
    get serviceManager(): ServiceManager.IManager;
    get mimeExtensions(): IRenderMime.IExtensionModule[];
    get info(): JupyterLab.IInfo;
    get path(): JupyterFrontEnd.IPaths;
    get plugins(): Plugins;
    get ready(): Promise<void>;
    get focusTracker(): FocusTracker<Widget>;
    plugin(id: string): Plugin | undefined;
    service(id: string): Plugin['service'];
    notebook(path: string): Promise<BoxPanel>;
}
export default JupyterLabAppAdapter;
