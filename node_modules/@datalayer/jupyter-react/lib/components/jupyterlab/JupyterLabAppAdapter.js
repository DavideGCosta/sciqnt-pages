/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { BoxPanel } from '@lumino/widgets';
import { JupyterLab, LabShell, } from '@jupyterlab/application';
export class JupyterLabAppAdapter {
    _jupyterLab;
    _shell;
    _plugins;
    _ready;
    _readyResolve;
    constructor(props, jupyterlab) {
        if (jupyterlab) {
            this._jupyterLab = jupyterlab;
            this._ready = new Promise((resolve, _) => {
                this._readyResolve = resolve;
            });
            this._plugins = this._jupyterLab['_plugins'];
            this._readyResolve();
            return;
        }
        this._ready = new Promise((resolve, _) => {
            this._readyResolve = resolve;
        });
        this.load(props);
    }
    async load(props) {
        const { hostId, extensions, mimeExtensions, splash, extensionPromises, mimeExtensionPromises, devMode, serviceManager, } = props;
        //    PageConfig.setOption("disabledExtensions", '["@jupyterlab/apputils-extension:sessionDialogs"]');
        const mimeExtensionResolved = await Promise.all(mimeExtensionPromises);
        mimeExtensions.push(...mimeExtensionResolved);
        this._shell = new LabShell();
        this._jupyterLab = new JupyterLab({
            shell: this._shell,
            mimeExtensions,
            devMode,
            serviceManager,
            disabled: {
                // The disabled property is not honoored in JupyterLab core although it is part of the public API...
                patterns: [],
                matches: [],
            },
            deferred: {
                patterns: [],
                matches: [],
            },
        });
        const extensionResolved = await Promise.all(extensionPromises);
        extensions.push(...extensionResolved);
        this._jupyterLab.registerPluginModules(extensions);
        if (!splash) {
            this._jupyterLab.deregisterPlugin('@jupyterlab/apputils-extension:splash', true);
        }
        /*
        if (collaborative) {
          this._jupyterLab.deregisterPlugin("@jupyterlab/filebrowser-extension:default-file-browser", true);
        }
        */
        this._jupyterLab.start({
            hostID: hostId,
            startPlugins: [],
            ignorePlugins: [], // How is this used in JupyterLab core?
        });
        this._jupyterLab.restored.then(() => {
            this._plugins = this._jupyterLab['_plugins'];
            this._readyResolve();
        });
    }
    static create(jupyterLab) {
        return new JupyterLabAppAdapter(undefined, jupyterLab);
    }
    get jupyterLab() {
        return this._jupyterLab;
    }
    get shell() {
        return this._jupyterLab.shell;
    }
    get docRegistry() {
        return this._jupyterLab.docRegistry;
    }
    get commands() {
        return this._jupyterLab.commands;
    }
    get serviceManager() {
        return this._jupyterLab.serviceManager;
    }
    get mimeExtensions() {
        return this._jupyterLab.info.mimeExtensions;
    }
    get info() {
        return this._jupyterLab.info;
    }
    get path() {
        return this._jupyterLab.paths;
    }
    get plugins() {
        return this._plugins;
    }
    get ready() {
        return this._ready;
    }
    get focusTracker() {
        return this.shell._tracker;
    }
    plugin(id) {
        return this._plugins.get(id);
    }
    service(id) {
        return this._plugins.get(id)?.service;
    }
    async notebook(path) {
        await this.commands.execute('apputils:reset');
        const notebookPanel = (await this.commands.execute('docmanager:open', {
            path: path,
            factory: 'Notebook',
            kernel: { name: 'python3' },
        }));
        const boxPanel = new BoxPanel();
        boxPanel.addClass('dla-Jupyter-Notebook');
        boxPanel.spacing = 0;
        boxPanel.addWidget(notebookPanel);
        this.focusTracker.add(notebookPanel);
        return boxPanel;
    }
}
export default JupyterLabAppAdapter;
//# sourceMappingURL=JupyterLabAppAdapter.js.map