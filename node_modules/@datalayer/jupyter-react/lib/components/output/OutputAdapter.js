/*
 * Copyright (c) 2021-2023 Datalayer, Inc.
 *
 * MIT License
 */
import { OutputArea, OutputAreaModel, } from '@jupyterlab/outputarea';
import { RenderMimeRegistry, standardRendererFactories, } from '@jupyterlab/rendermime';
import { rendererFactory as jsonRendererFactory } from '@jupyterlab/json-extension';
import { rendererFactory as javascriptRendererFactory } from '@jupyterlab/javascript-extension';
import { requireLoader as loader } from '@jupyter-widgets/html-manager/lib/libembed-amd';
import { WIDGET_MIMETYPE, WidgetRenderer, } from '@jupyter-widgets/html-manager/lib/output_renderers';
import { ClassicWidgetManager } from '../../jupyter/ipywidgets/classic/manager';
export class OutputAdapter {
    _kernel;
    _renderers;
    _outputArea;
    _rendermime;
    _iPyWidgetsClassicManager;
    constructor(kernel, outputs, outputAreaModel) {
        this._kernel = kernel;
        this._renderers = standardRendererFactories.filter(factory => factory.mimeTypes[0] !== 'text/javascript');
        this._renderers.push(jsonRendererFactory);
        this._renderers.push(javascriptRendererFactory);
        this._rendermime = new RenderMimeRegistry({
            initialFactories: this._renderers,
        });
        this._iPyWidgetsClassicManager = new ClassicWidgetManager({
            loader,
        });
        this._rendermime.addFactory({
            safe: false,
            mimeTypes: [WIDGET_MIMETYPE],
            createRenderer: (options) => new WidgetRenderer(options, this._iPyWidgetsClassicManager),
        }, 0);
        //    const widgetRegistry = activateWidgetExtension(this._rendermime);
        //    activatePlotlyWidgetExtension(widgetRegistry);
        const model = outputAreaModel ??
            new OutputAreaModel({
                trusted: true,
                values: outputs,
            });
        this._outputArea = new OutputArea({
            model,
            rendermime: this._rendermime,
        });
        if (outputs && outputs[0]) {
            const data = outputs[0].data;
            if (data) {
                const isPlotly = data['application/vnd.plotly.v1+json'];
                if (isPlotly) {
                    let script = this._outputArea.node.children[0].children[1].children[0]
                        .children[1].innerHTML;
                    script = script.replaceAll('\n,', '\n');
                    eval(script);
                }
            }
        }
        this.initKernel();
    }
    async execute(code) {
        if (this._kernel) {
            this.clear();
            await this._kernel?.execute(code, { model: this._outputArea.model })
                ?.done;
        }
    }
    interrupt() {
        if (this._kernel) {
            this._kernel.interrupt();
        }
    }
    clear() {
        this._outputArea.model.clear();
    }
    get kernel() {
        return this._kernel;
    }
    set kernel(kernel) {
        this._kernel = kernel;
        this.initKernel();
    }
    get outputArea() {
        return this._outputArea;
    }
    initKernel() {
        if (this._kernel) {
            this._iPyWidgetsClassicManager.registerWithKernel(this._kernel.connection);
        }
    }
}
export default OutputAdapter;
//# sourceMappingURL=OutputAdapter.js.map